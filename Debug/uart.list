
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002054  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08002160  08002160  00012160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002204  08002204  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002204  08002204  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002204  08002204  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002204  08002204  00012204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002208  08002208  00012208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800220c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  0800227c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  0800227c  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000053aa  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013d7  00000000  00000000  00025443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  00026820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000630  00000000  00000000  00026ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001769e  00000000  00000000  00027508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006ec4  00000000  00000000  0003eba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000833df  00000000  00000000  00045a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c8e49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002048  00000000  00000000  000c8e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002148 	.word	0x08002148

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002148 	.word	0x08002148

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa12 	bl	8000578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80e 	bl	8000174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f87c 	bl	8000254 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f850 	bl	8000200 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("la uart funciona!!!!!!\n");
 8000160:	4803      	ldr	r0, [pc, #12]	; (8000170 <main+0x24>)
 8000162:	f001 fb69 	bl	8001838 <puts>
	  HAL_Delay(1000);
 8000166:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800016a:	f000 fa67 	bl	800063c <HAL_Delay>
	  printf("la uart funciona!!!!!!\n");
 800016e:	e7f7      	b.n	8000160 <main+0x14>
 8000170:	08002160 	.word	0x08002160

08000174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b090      	sub	sp, #64	; 0x40
 8000178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017a:	f107 0318 	add.w	r3, r7, #24
 800017e:	2228      	movs	r2, #40	; 0x28
 8000180:	2100      	movs	r1, #0
 8000182:	4618      	mov	r0, r3
 8000184:	f001 fae2 	bl	800174c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000188:	1d3b      	adds	r3, r7, #4
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]
 8000194:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000196:	2301      	movs	r3, #1
 8000198:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800019e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a0:	2300      	movs	r3, #0
 80001a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a8:	2302      	movs	r3, #2
 80001aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b8:	f107 0318 	add.w	r3, r7, #24
 80001bc:	4618      	mov	r0, r3
 80001be:	f000 fcc9 	bl	8000b54 <HAL_RCC_OscConfig>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001c8:	f000 f87c 	bl	80002c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001cc:	230f      	movs	r3, #15
 80001ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d0:	2302      	movs	r3, #2
 80001d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	2102      	movs	r1, #2
 80001e6:	4618      	mov	r0, r3
 80001e8:	f000 ff36 	bl	8001058 <HAL_RCC_ClockConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001f2:	f000 f867 	bl	80002c4 <Error_Handler>
  }
}
 80001f6:	bf00      	nop
 80001f8:	3740      	adds	r7, #64	; 0x40
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
	...

08000200 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000204:	4b11      	ldr	r3, [pc, #68]	; (800024c <MX_USART1_UART_Init+0x4c>)
 8000206:	4a12      	ldr	r2, [pc, #72]	; (8000250 <MX_USART1_UART_Init+0x50>)
 8000208:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800020a:	4b10      	ldr	r3, [pc, #64]	; (800024c <MX_USART1_UART_Init+0x4c>)
 800020c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000210:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000212:	4b0e      	ldr	r3, [pc, #56]	; (800024c <MX_USART1_UART_Init+0x4c>)
 8000214:	2200      	movs	r2, #0
 8000216:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000218:	4b0c      	ldr	r3, [pc, #48]	; (800024c <MX_USART1_UART_Init+0x4c>)
 800021a:	2200      	movs	r2, #0
 800021c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800021e:	4b0b      	ldr	r3, [pc, #44]	; (800024c <MX_USART1_UART_Init+0x4c>)
 8000220:	2200      	movs	r2, #0
 8000222:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <MX_USART1_UART_Init+0x4c>)
 8000226:	2208      	movs	r2, #8
 8000228:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800022a:	4b08      	ldr	r3, [pc, #32]	; (800024c <MX_USART1_UART_Init+0x4c>)
 800022c:	2200      	movs	r2, #0
 800022e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <MX_USART1_UART_Init+0x4c>)
 8000232:	2200      	movs	r2, #0
 8000234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000236:	4805      	ldr	r0, [pc, #20]	; (800024c <MX_USART1_UART_Init+0x4c>)
 8000238:	f001 f8a6 	bl	8001388 <HAL_UART_Init>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000242:	f000 f83f 	bl	80002c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	2000008c 	.word	0x2000008c
 8000250:	40013800 	.word	0x40013800

08000254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <MX_GPIO_Init+0x40>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	4a0d      	ldr	r2, [pc, #52]	; (8000294 <MX_GPIO_Init+0x40>)
 8000260:	f043 0320 	orr.w	r3, r3, #32
 8000264:	6193      	str	r3, [r2, #24]
 8000266:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <MX_GPIO_Init+0x40>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	f003 0320 	and.w	r3, r3, #32
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <MX_GPIO_Init+0x40>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	4a07      	ldr	r2, [pc, #28]	; (8000294 <MX_GPIO_Init+0x40>)
 8000278:	f043 0304 	orr.w	r3, r3, #4
 800027c:	6193      	str	r3, [r2, #24]
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <MX_GPIO_Init+0x40>)
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	f003 0304 	and.w	r3, r3, #4
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	683b      	ldr	r3, [r7, #0]

}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	40021000 	.word	0x40021000

08000298 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	60f8      	str	r0, [r7, #12]
 80002a0:	60b9      	str	r1, [r7, #8]
 80002a2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len, HAL_MAX_DELAY);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	f04f 33ff 	mov.w	r3, #4294967295
 80002ac:	68b9      	ldr	r1, [r7, #8]
 80002ae:	4804      	ldr	r0, [pc, #16]	; (80002c0 <_write+0x28>)
 80002b0:	f001 f8b7 	bl	8001422 <HAL_UART_Transmit>
	return len;
 80002b4:	687b      	ldr	r3, [r7, #4]
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	3710      	adds	r7, #16
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	2000008c 	.word	0x2000008c

080002c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c8:	b672      	cpsid	i
}
 80002ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002cc:	e7fe      	b.n	80002cc <Error_Handler+0x8>
	...

080002d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002d6:	4b15      	ldr	r3, [pc, #84]	; (800032c <HAL_MspInit+0x5c>)
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	4a14      	ldr	r2, [pc, #80]	; (800032c <HAL_MspInit+0x5c>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6193      	str	r3, [r2, #24]
 80002e2:	4b12      	ldr	r3, [pc, #72]	; (800032c <HAL_MspInit+0x5c>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	60bb      	str	r3, [r7, #8]
 80002ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ee:	4b0f      	ldr	r3, [pc, #60]	; (800032c <HAL_MspInit+0x5c>)
 80002f0:	69db      	ldr	r3, [r3, #28]
 80002f2:	4a0e      	ldr	r2, [pc, #56]	; (800032c <HAL_MspInit+0x5c>)
 80002f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002f8:	61d3      	str	r3, [r2, #28]
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <HAL_MspInit+0x5c>)
 80002fc:	69db      	ldr	r3, [r3, #28]
 80002fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000306:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <HAL_MspInit+0x60>)
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <HAL_MspInit+0x60>)
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000322:	bf00      	nop
 8000324:	3714      	adds	r7, #20
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40021000 	.word	0x40021000
 8000330:	40010000 	.word	0x40010000

08000334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b088      	sub	sp, #32
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033c:	f107 0310 	add.w	r3, r7, #16
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	605a      	str	r2, [r3, #4]
 8000346:	609a      	str	r2, [r3, #8]
 8000348:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a1c      	ldr	r2, [pc, #112]	; (80003c0 <HAL_UART_MspInit+0x8c>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d131      	bne.n	80003b8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000354:	4b1b      	ldr	r3, [pc, #108]	; (80003c4 <HAL_UART_MspInit+0x90>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a1a      	ldr	r2, [pc, #104]	; (80003c4 <HAL_UART_MspInit+0x90>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b18      	ldr	r3, [pc, #96]	; (80003c4 <HAL_UART_MspInit+0x90>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800036c:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <HAL_UART_MspInit+0x90>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a14      	ldr	r2, [pc, #80]	; (80003c4 <HAL_UART_MspInit+0x90>)
 8000372:	f043 0304 	orr.w	r3, r3, #4
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <HAL_UART_MspInit+0x90>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0304 	and.w	r3, r3, #4
 8000380:	60bb      	str	r3, [r7, #8]
 8000382:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000388:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800038a:	2302      	movs	r3, #2
 800038c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800038e:	2303      	movs	r3, #3
 8000390:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000392:	f107 0310 	add.w	r3, r7, #16
 8000396:	4619      	mov	r1, r3
 8000398:	480b      	ldr	r0, [pc, #44]	; (80003c8 <HAL_UART_MspInit+0x94>)
 800039a:	f000 fa57 	bl	800084c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800039e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a8:	2300      	movs	r3, #0
 80003aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ac:	f107 0310 	add.w	r3, r7, #16
 80003b0:	4619      	mov	r1, r3
 80003b2:	4805      	ldr	r0, [pc, #20]	; (80003c8 <HAL_UART_MspInit+0x94>)
 80003b4:	f000 fa4a 	bl	800084c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80003b8:	bf00      	nop
 80003ba:	3720      	adds	r7, #32
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40013800 	.word	0x40013800
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40010800 	.word	0x40010800

080003cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <NMI_Handler+0x4>

080003d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d6:	e7fe      	b.n	80003d6 <HardFault_Handler+0x4>

080003d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003dc:	e7fe      	b.n	80003dc <MemManage_Handler+0x4>

080003de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <BusFault_Handler+0x4>

080003e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <UsageFault_Handler+0x4>

080003ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr

080003f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003fa:	bf00      	nop
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr

08000402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr

0800040e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000412:	f000 f8f7 	bl	8000604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}

0800041a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	b086      	sub	sp, #24
 800041e:	af00      	add	r7, sp, #0
 8000420:	60f8      	str	r0, [r7, #12]
 8000422:	60b9      	str	r1, [r7, #8]
 8000424:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000426:	2300      	movs	r3, #0
 8000428:	617b      	str	r3, [r7, #20]
 800042a:	e00a      	b.n	8000442 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800042c:	f3af 8000 	nop.w
 8000430:	4601      	mov	r1, r0
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	1c5a      	adds	r2, r3, #1
 8000436:	60ba      	str	r2, [r7, #8]
 8000438:	b2ca      	uxtb	r2, r1
 800043a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	3301      	adds	r3, #1
 8000440:	617b      	str	r3, [r7, #20]
 8000442:	697a      	ldr	r2, [r7, #20]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	429a      	cmp	r2, r3
 8000448:	dbf0      	blt.n	800042c <_read+0x12>
	}

return len;
 800044a:	687b      	ldr	r3, [r7, #4]
}
 800044c:	4618      	mov	r0, r3
 800044e:	3718      	adds	r7, #24
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	return -1;
 800045c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000460:	4618      	mov	r0, r3
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr

0800046a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800046a:	b480      	push	{r7}
 800046c:	b083      	sub	sp, #12
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
 8000472:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800047a:	605a      	str	r2, [r3, #4]
	return 0;
 800047c:	2300      	movs	r3, #0
}
 800047e:	4618      	mov	r0, r3
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <_isatty>:

int _isatty(int file)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	return 1;
 8000490:	2301      	movs	r3, #1
}
 8000492:	4618      	mov	r0, r3
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	607a      	str	r2, [r7, #4]
	return 0;
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004bc:	4a14      	ldr	r2, [pc, #80]	; (8000510 <_sbrk+0x5c>)
 80004be:	4b15      	ldr	r3, [pc, #84]	; (8000514 <_sbrk+0x60>)
 80004c0:	1ad3      	subs	r3, r2, r3
 80004c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004c8:	4b13      	ldr	r3, [pc, #76]	; (8000518 <_sbrk+0x64>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d102      	bne.n	80004d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <_sbrk+0x64>)
 80004d2:	4a12      	ldr	r2, [pc, #72]	; (800051c <_sbrk+0x68>)
 80004d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <_sbrk+0x64>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4413      	add	r3, r2
 80004de:	693a      	ldr	r2, [r7, #16]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d207      	bcs.n	80004f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004e4:	f001 f908 	bl	80016f8 <__errno>
 80004e8:	4603      	mov	r3, r0
 80004ea:	220c      	movs	r2, #12
 80004ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ee:	f04f 33ff 	mov.w	r3, #4294967295
 80004f2:	e009      	b.n	8000508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <_sbrk+0x64>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004fa:	4b07      	ldr	r3, [pc, #28]	; (8000518 <_sbrk+0x64>)
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4413      	add	r3, r2
 8000502:	4a05      	ldr	r2, [pc, #20]	; (8000518 <_sbrk+0x64>)
 8000504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000506:	68fb      	ldr	r3, [r7, #12]
}
 8000508:	4618      	mov	r0, r3
 800050a:	3718      	adds	r7, #24
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20005000 	.word	0x20005000
 8000514:	00000400 	.word	0x00000400
 8000518:	200000d0 	.word	0x200000d0
 800051c:	200000e8 	.word	0x200000e8

08000520 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr

0800052c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800052c:	480c      	ldr	r0, [pc, #48]	; (8000560 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800052e:	490d      	ldr	r1, [pc, #52]	; (8000564 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000534:	e002      	b.n	800053c <LoopCopyDataInit>

08000536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053a:	3304      	adds	r3, #4

0800053c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800053c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000540:	d3f9      	bcc.n	8000536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000542:	4a0a      	ldr	r2, [pc, #40]	; (800056c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000544:	4c0a      	ldr	r4, [pc, #40]	; (8000570 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000548:	e001      	b.n	800054e <LoopFillZerobss>

0800054a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800054c:	3204      	adds	r2, #4

0800054e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000550:	d3fb      	bcc.n	800054a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000552:	f7ff ffe5 	bl	8000520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000556:	f001 f8d5 	bl	8001704 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055a:	f7ff fdf7 	bl	800014c <main>
  bx lr
 800055e:	4770      	bx	lr
  ldr r0, =_sdata
 8000560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000564:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000568:	0800220c 	.word	0x0800220c
  ldr r2, =_sbss
 800056c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000570:	200000e8 	.word	0x200000e8

08000574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC1_2_IRQHandler>
	...

08000578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <HAL_Init+0x28>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <HAL_Init+0x28>)
 8000582:	f043 0310 	orr.w	r3, r3, #16
 8000586:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000588:	2003      	movs	r0, #3
 800058a:	f000 f92b 	bl	80007e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800058e:	200f      	movs	r0, #15
 8000590:	f000 f808 	bl	80005a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000594:	f7ff fe9c 	bl	80002d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000598:	2300      	movs	r3, #0
}
 800059a:	4618      	mov	r0, r3
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40022000 	.word	0x40022000

080005a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <HAL_InitTick+0x54>)
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HAL_InitTick+0x58>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4619      	mov	r1, r3
 80005b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80005be:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f935 	bl	8000832 <HAL_SYSTICK_Config>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
 80005d0:	e00e      	b.n	80005f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b0f      	cmp	r3, #15
 80005d6:	d80a      	bhi.n	80005ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d8:	2200      	movs	r2, #0
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	f04f 30ff 	mov.w	r0, #4294967295
 80005e0:	f000 f90b 	bl	80007fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e4:	4a06      	ldr	r2, [pc, #24]	; (8000600 <HAL_InitTick+0x5c>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ea:	2300      	movs	r3, #0
 80005ec:	e000      	b.n	80005f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000000 	.word	0x20000000
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000004 	.word	0x20000004

08000604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <HAL_IncTick+0x1c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <HAL_IncTick+0x20>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4413      	add	r3, r2
 8000614:	4a03      	ldr	r2, [pc, #12]	; (8000624 <HAL_IncTick+0x20>)
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	20000008 	.word	0x20000008
 8000624:	200000d4 	.word	0x200000d4

08000628 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return uwTick;
 800062c:	4b02      	ldr	r3, [pc, #8]	; (8000638 <HAL_GetTick+0x10>)
 800062e:	681b      	ldr	r3, [r3, #0]
}
 8000630:	4618      	mov	r0, r3
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	200000d4 	.word	0x200000d4

0800063c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000644:	f7ff fff0 	bl	8000628 <HAL_GetTick>
 8000648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000654:	d005      	beq.n	8000662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <HAL_Delay+0x44>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	461a      	mov	r2, r3
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	4413      	add	r3, r2
 8000660:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000662:	bf00      	nop
 8000664:	f7ff ffe0 	bl	8000628 <HAL_GetTick>
 8000668:	4602      	mov	r2, r0
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	429a      	cmp	r2, r3
 8000672:	d8f7      	bhi.n	8000664 <HAL_Delay+0x28>
  {
  }
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000008 	.word	0x20000008

08000684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a0:	4013      	ands	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006b6:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	60d3      	str	r3, [r2, #12]
}
 80006bc:	bf00      	nop
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <__NVIC_GetPriorityGrouping+0x18>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	0a1b      	lsrs	r3, r3, #8
 80006d6:	f003 0307 	and.w	r3, r3, #7
}
 80006da:	4618      	mov	r0, r3
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	db0a      	blt.n	8000712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	490c      	ldr	r1, [pc, #48]	; (8000734 <__NVIC_SetPriority+0x4c>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	440b      	add	r3, r1
 800070c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000710:	e00a      	b.n	8000728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	; (8000738 <__NVIC_SetPriority+0x50>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	3b04      	subs	r3, #4
 8000720:	0112      	lsls	r2, r2, #4
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	440b      	add	r3, r1
 8000726:	761a      	strb	r2, [r3, #24]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	; 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	2b04      	cmp	r3, #4
 8000758:	bf28      	it	cs
 800075a:	2304      	movcs	r3, #4
 800075c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3304      	adds	r3, #4
 8000762:	2b06      	cmp	r3, #6
 8000764:	d902      	bls.n	800076c <NVIC_EncodePriority+0x30>
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3b03      	subs	r3, #3
 800076a:	e000      	b.n	800076e <NVIC_EncodePriority+0x32>
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	f04f 32ff 	mov.w	r2, #4294967295
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	43da      	mvns	r2, r3
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	401a      	ands	r2, r3
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000784:	f04f 31ff 	mov.w	r1, #4294967295
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43d9      	mvns	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	4313      	orrs	r3, r2
         );
}
 8000796:	4618      	mov	r0, r3
 8000798:	3724      	adds	r7, #36	; 0x24
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b0:	d301      	bcc.n	80007b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b2:	2301      	movs	r3, #1
 80007b4:	e00f      	b.n	80007d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <SysTick_Config+0x40>)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007be:	210f      	movs	r1, #15
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295
 80007c4:	f7ff ff90 	bl	80006e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <SysTick_Config+0x40>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <SysTick_Config+0x40>)
 80007d0:	2207      	movs	r2, #7
 80007d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	e000e010 	.word	0xe000e010

080007e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff ff49 	bl	8000684 <__NVIC_SetPriorityGrouping>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b086      	sub	sp, #24
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
 8000806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800080c:	f7ff ff5e 	bl	80006cc <__NVIC_GetPriorityGrouping>
 8000810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	68b9      	ldr	r1, [r7, #8]
 8000816:	6978      	ldr	r0, [r7, #20]
 8000818:	f7ff ff90 	bl	800073c <NVIC_EncodePriority>
 800081c:	4602      	mov	r2, r0
 800081e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff5f 	bl	80006e8 <__NVIC_SetPriority>
}
 800082a:	bf00      	nop
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff ffb0 	bl	80007a0 <SysTick_Config>
 8000840:	4603      	mov	r3, r0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800084c:	b480      	push	{r7}
 800084e:	b08b      	sub	sp, #44	; 0x2c
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800085e:	e169      	b.n	8000b34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000860:	2201      	movs	r2, #1
 8000862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	69fa      	ldr	r2, [r7, #28]
 8000870:	4013      	ands	r3, r2
 8000872:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000874:	69ba      	ldr	r2, [r7, #24]
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	429a      	cmp	r2, r3
 800087a:	f040 8158 	bne.w	8000b2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	4a9a      	ldr	r2, [pc, #616]	; (8000aec <HAL_GPIO_Init+0x2a0>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d05e      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
 8000888:	4a98      	ldr	r2, [pc, #608]	; (8000aec <HAL_GPIO_Init+0x2a0>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d875      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 800088e:	4a98      	ldr	r2, [pc, #608]	; (8000af0 <HAL_GPIO_Init+0x2a4>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d058      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
 8000894:	4a96      	ldr	r2, [pc, #600]	; (8000af0 <HAL_GPIO_Init+0x2a4>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d86f      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 800089a:	4a96      	ldr	r2, [pc, #600]	; (8000af4 <HAL_GPIO_Init+0x2a8>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d052      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
 80008a0:	4a94      	ldr	r2, [pc, #592]	; (8000af4 <HAL_GPIO_Init+0x2a8>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d869      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 80008a6:	4a94      	ldr	r2, [pc, #592]	; (8000af8 <HAL_GPIO_Init+0x2ac>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d04c      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
 80008ac:	4a92      	ldr	r2, [pc, #584]	; (8000af8 <HAL_GPIO_Init+0x2ac>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d863      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 80008b2:	4a92      	ldr	r2, [pc, #584]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d046      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
 80008b8:	4a90      	ldr	r2, [pc, #576]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d85d      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 80008be:	2b12      	cmp	r3, #18
 80008c0:	d82a      	bhi.n	8000918 <HAL_GPIO_Init+0xcc>
 80008c2:	2b12      	cmp	r3, #18
 80008c4:	d859      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 80008c6:	a201      	add	r2, pc, #4	; (adr r2, 80008cc <HAL_GPIO_Init+0x80>)
 80008c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008cc:	08000947 	.word	0x08000947
 80008d0:	08000921 	.word	0x08000921
 80008d4:	08000933 	.word	0x08000933
 80008d8:	08000975 	.word	0x08000975
 80008dc:	0800097b 	.word	0x0800097b
 80008e0:	0800097b 	.word	0x0800097b
 80008e4:	0800097b 	.word	0x0800097b
 80008e8:	0800097b 	.word	0x0800097b
 80008ec:	0800097b 	.word	0x0800097b
 80008f0:	0800097b 	.word	0x0800097b
 80008f4:	0800097b 	.word	0x0800097b
 80008f8:	0800097b 	.word	0x0800097b
 80008fc:	0800097b 	.word	0x0800097b
 8000900:	0800097b 	.word	0x0800097b
 8000904:	0800097b 	.word	0x0800097b
 8000908:	0800097b 	.word	0x0800097b
 800090c:	0800097b 	.word	0x0800097b
 8000910:	08000929 	.word	0x08000929
 8000914:	0800093d 	.word	0x0800093d
 8000918:	4a79      	ldr	r2, [pc, #484]	; (8000b00 <HAL_GPIO_Init+0x2b4>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d013      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800091e:	e02c      	b.n	800097a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	623b      	str	r3, [r7, #32]
          break;
 8000926:	e029      	b.n	800097c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	3304      	adds	r3, #4
 800092e:	623b      	str	r3, [r7, #32]
          break;
 8000930:	e024      	b.n	800097c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	3308      	adds	r3, #8
 8000938:	623b      	str	r3, [r7, #32]
          break;
 800093a:	e01f      	b.n	800097c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	330c      	adds	r3, #12
 8000942:	623b      	str	r3, [r7, #32]
          break;
 8000944:	e01a      	b.n	800097c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d102      	bne.n	8000954 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800094e:	2304      	movs	r3, #4
 8000950:	623b      	str	r3, [r7, #32]
          break;
 8000952:	e013      	b.n	800097c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d105      	bne.n	8000968 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800095c:	2308      	movs	r3, #8
 800095e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	69fa      	ldr	r2, [r7, #28]
 8000964:	611a      	str	r2, [r3, #16]
          break;
 8000966:	e009      	b.n	800097c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000968:	2308      	movs	r3, #8
 800096a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	69fa      	ldr	r2, [r7, #28]
 8000970:	615a      	str	r2, [r3, #20]
          break;
 8000972:	e003      	b.n	800097c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
          break;
 8000978:	e000      	b.n	800097c <HAL_GPIO_Init+0x130>
          break;
 800097a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	2bff      	cmp	r3, #255	; 0xff
 8000980:	d801      	bhi.n	8000986 <HAL_GPIO_Init+0x13a>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	e001      	b.n	800098a <HAL_GPIO_Init+0x13e>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3304      	adds	r3, #4
 800098a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	2bff      	cmp	r3, #255	; 0xff
 8000990:	d802      	bhi.n	8000998 <HAL_GPIO_Init+0x14c>
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	e002      	b.n	800099e <HAL_GPIO_Init+0x152>
 8000998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099a:	3b08      	subs	r3, #8
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	210f      	movs	r1, #15
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	401a      	ands	r2, r3
 80009b0:	6a39      	ldr	r1, [r7, #32]
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	fa01 f303 	lsl.w	r3, r1, r3
 80009b8:	431a      	orrs	r2, r3
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f000 80b1 	beq.w	8000b2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009cc:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <HAL_GPIO_Init+0x2b8>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a4c      	ldr	r2, [pc, #304]	; (8000b04 <HAL_GPIO_Init+0x2b8>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b4a      	ldr	r3, [pc, #296]	; (8000b04 <HAL_GPIO_Init+0x2b8>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009e4:	4a48      	ldr	r2, [pc, #288]	; (8000b08 <HAL_GPIO_Init+0x2bc>)
 80009e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e8:	089b      	lsrs	r3, r3, #2
 80009ea:	3302      	adds	r3, #2
 80009ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	f003 0303 	and.w	r3, r3, #3
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	220f      	movs	r2, #15
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	4013      	ands	r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a40      	ldr	r2, [pc, #256]	; (8000b0c <HAL_GPIO_Init+0x2c0>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d013      	beq.n	8000a38 <HAL_GPIO_Init+0x1ec>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a3f      	ldr	r2, [pc, #252]	; (8000b10 <HAL_GPIO_Init+0x2c4>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d00d      	beq.n	8000a34 <HAL_GPIO_Init+0x1e8>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a3e      	ldr	r2, [pc, #248]	; (8000b14 <HAL_GPIO_Init+0x2c8>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d007      	beq.n	8000a30 <HAL_GPIO_Init+0x1e4>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a3d      	ldr	r2, [pc, #244]	; (8000b18 <HAL_GPIO_Init+0x2cc>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d101      	bne.n	8000a2c <HAL_GPIO_Init+0x1e0>
 8000a28:	2303      	movs	r3, #3
 8000a2a:	e006      	b.n	8000a3a <HAL_GPIO_Init+0x1ee>
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	e004      	b.n	8000a3a <HAL_GPIO_Init+0x1ee>
 8000a30:	2302      	movs	r3, #2
 8000a32:	e002      	b.n	8000a3a <HAL_GPIO_Init+0x1ee>
 8000a34:	2301      	movs	r3, #1
 8000a36:	e000      	b.n	8000a3a <HAL_GPIO_Init+0x1ee>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a3c:	f002 0203 	and.w	r2, r2, #3
 8000a40:	0092      	lsls	r2, r2, #2
 8000a42:	4093      	lsls	r3, r2
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a4a:	492f      	ldr	r1, [pc, #188]	; (8000b08 <HAL_GPIO_Init+0x2bc>)
 8000a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4e:	089b      	lsrs	r3, r3, #2
 8000a50:	3302      	adds	r3, #2
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d006      	beq.n	8000a72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a64:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	492c      	ldr	r1, [pc, #176]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	600b      	str	r3, [r1, #0]
 8000a70:	e006      	b.n	8000a80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a72:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	4928      	ldr	r1, [pc, #160]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d006      	beq.n	8000a9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	4922      	ldr	r1, [pc, #136]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	604b      	str	r3, [r1, #4]
 8000a98:	e006      	b.n	8000aa8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a9a:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a9c:	685a      	ldr	r2, [r3, #4]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	491e      	ldr	r1, [pc, #120]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d006      	beq.n	8000ac2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ab4:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000ab6:	689a      	ldr	r2, [r3, #8]
 8000ab8:	4918      	ldr	r1, [pc, #96]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	608b      	str	r3, [r1, #8]
 8000ac0:	e006      	b.n	8000ad0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000ac4:	689a      	ldr	r2, [r3, #8]
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	4914      	ldr	r1, [pc, #80]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000acc:	4013      	ands	r3, r2
 8000ace:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d021      	beq.n	8000b20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000ade:	68da      	ldr	r2, [r3, #12]
 8000ae0:	490e      	ldr	r1, [pc, #56]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	60cb      	str	r3, [r1, #12]
 8000ae8:	e021      	b.n	8000b2e <HAL_GPIO_Init+0x2e2>
 8000aea:	bf00      	nop
 8000aec:	10320000 	.word	0x10320000
 8000af0:	10310000 	.word	0x10310000
 8000af4:	10220000 	.word	0x10220000
 8000af8:	10210000 	.word	0x10210000
 8000afc:	10120000 	.word	0x10120000
 8000b00:	10110000 	.word	0x10110000
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40010000 	.word	0x40010000
 8000b0c:	40010800 	.word	0x40010800
 8000b10:	40010c00 	.word	0x40010c00
 8000b14:	40011000 	.word	0x40011000
 8000b18:	40011400 	.word	0x40011400
 8000b1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_GPIO_Init+0x304>)
 8000b22:	68da      	ldr	r2, [r3, #12]
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	4909      	ldr	r1, [pc, #36]	; (8000b50 <HAL_GPIO_Init+0x304>)
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	3301      	adds	r3, #1
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f47f ae8e 	bne.w	8000860 <HAL_GPIO_Init+0x14>
  }
}
 8000b44:	bf00      	nop
 8000b46:	bf00      	nop
 8000b48:	372c      	adds	r7, #44	; 0x2c
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	40010400 	.word	0x40010400

08000b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d101      	bne.n	8000b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e272      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 8087 	beq.w	8000c82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b74:	4b92      	ldr	r3, [pc, #584]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 030c 	and.w	r3, r3, #12
 8000b7c:	2b04      	cmp	r3, #4
 8000b7e:	d00c      	beq.n	8000b9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b80:	4b8f      	ldr	r3, [pc, #572]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 030c 	and.w	r3, r3, #12
 8000b88:	2b08      	cmp	r3, #8
 8000b8a:	d112      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x5e>
 8000b8c:	4b8c      	ldr	r3, [pc, #560]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b98:	d10b      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b9a:	4b89      	ldr	r3, [pc, #548]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d06c      	beq.n	8000c80 <HAL_RCC_OscConfig+0x12c>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d168      	bne.n	8000c80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e24c      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bba:	d106      	bne.n	8000bca <HAL_RCC_OscConfig+0x76>
 8000bbc:	4b80      	ldr	r3, [pc, #512]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a7f      	ldr	r2, [pc, #508]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	e02e      	b.n	8000c28 <HAL_RCC_OscConfig+0xd4>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d10c      	bne.n	8000bec <HAL_RCC_OscConfig+0x98>
 8000bd2:	4b7b      	ldr	r3, [pc, #492]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a7a      	ldr	r2, [pc, #488]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	4b78      	ldr	r3, [pc, #480]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a77      	ldr	r2, [pc, #476]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	e01d      	b.n	8000c28 <HAL_RCC_OscConfig+0xd4>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bf4:	d10c      	bne.n	8000c10 <HAL_RCC_OscConfig+0xbc>
 8000bf6:	4b72      	ldr	r3, [pc, #456]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a71      	ldr	r2, [pc, #452]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	4b6f      	ldr	r3, [pc, #444]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a6e      	ldr	r2, [pc, #440]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	e00b      	b.n	8000c28 <HAL_RCC_OscConfig+0xd4>
 8000c10:	4b6b      	ldr	r3, [pc, #428]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a6a      	ldr	r2, [pc, #424]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	4b68      	ldr	r3, [pc, #416]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a67      	ldr	r2, [pc, #412]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d013      	beq.n	8000c58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c30:	f7ff fcfa 	bl	8000628 <HAL_GetTick>
 8000c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c36:	e008      	b.n	8000c4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c38:	f7ff fcf6 	bl	8000628 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b64      	cmp	r3, #100	; 0x64
 8000c44:	d901      	bls.n	8000c4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e200      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c4a:	4b5d      	ldr	r3, [pc, #372]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0f0      	beq.n	8000c38 <HAL_RCC_OscConfig+0xe4>
 8000c56:	e014      	b.n	8000c82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c58:	f7ff fce6 	bl	8000628 <HAL_GetTick>
 8000c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c5e:	e008      	b.n	8000c72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c60:	f7ff fce2 	bl	8000628 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b64      	cmp	r3, #100	; 0x64
 8000c6c:	d901      	bls.n	8000c72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	e1ec      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c72:	4b53      	ldr	r3, [pc, #332]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1f0      	bne.n	8000c60 <HAL_RCC_OscConfig+0x10c>
 8000c7e:	e000      	b.n	8000c82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d063      	beq.n	8000d56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c8e:	4b4c      	ldr	r3, [pc, #304]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f003 030c 	and.w	r3, r3, #12
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d00b      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c9a:	4b49      	ldr	r3, [pc, #292]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 030c 	and.w	r3, r3, #12
 8000ca2:	2b08      	cmp	r3, #8
 8000ca4:	d11c      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x18c>
 8000ca6:	4b46      	ldr	r3, [pc, #280]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d116      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb2:	4b43      	ldr	r3, [pc, #268]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d005      	beq.n	8000cca <HAL_RCC_OscConfig+0x176>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d001      	beq.n	8000cca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e1c0      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cca:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4939      	ldr	r1, [pc, #228]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cde:	e03a      	b.n	8000d56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d020      	beq.n	8000d2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ce8:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <HAL_RCC_OscConfig+0x270>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cee:	f7ff fc9b 	bl	8000628 <HAL_GetTick>
 8000cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf4:	e008      	b.n	8000d08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cf6:	f7ff fc97 	bl	8000628 <HAL_GetTick>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d901      	bls.n	8000d08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d04:	2303      	movs	r3, #3
 8000d06:	e1a1      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d08:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0f0      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d14:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	4927      	ldr	r1, [pc, #156]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	4313      	orrs	r3, r2
 8000d26:	600b      	str	r3, [r1, #0]
 8000d28:	e015      	b.n	8000d56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d2a:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <HAL_RCC_OscConfig+0x270>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d30:	f7ff fc7a 	bl	8000628 <HAL_GetTick>
 8000d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d36:	e008      	b.n	8000d4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d38:	f7ff fc76 	bl	8000628 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d901      	bls.n	8000d4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e180      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1f0      	bne.n	8000d38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d03a      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d019      	beq.n	8000d9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_RCC_OscConfig+0x274>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d70:	f7ff fc5a 	bl	8000628 <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d78:	f7ff fc56 	bl	8000628 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e160      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0f0      	beq.n	8000d78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d96:	2001      	movs	r0, #1
 8000d98:	f000 fad8 	bl	800134c <RCC_Delay>
 8000d9c:	e01c      	b.n	8000dd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_RCC_OscConfig+0x274>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da4:	f7ff fc40 	bl	8000628 <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000daa:	e00f      	b.n	8000dcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dac:	f7ff fc3c 	bl	8000628 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d908      	bls.n	8000dcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e146      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	42420000 	.word	0x42420000
 8000dc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dcc:	4b92      	ldr	r3, [pc, #584]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1e9      	bne.n	8000dac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 80a6 	beq.w	8000f32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dea:	4b8b      	ldr	r3, [pc, #556]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10d      	bne.n	8000e12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	4b88      	ldr	r3, [pc, #544]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a87      	ldr	r2, [pc, #540]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	61d3      	str	r3, [r2, #28]
 8000e02:	4b85      	ldr	r3, [pc, #532]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e12:	4b82      	ldr	r3, [pc, #520]	; (800101c <HAL_RCC_OscConfig+0x4c8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d118      	bne.n	8000e50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e1e:	4b7f      	ldr	r3, [pc, #508]	; (800101c <HAL_RCC_OscConfig+0x4c8>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a7e      	ldr	r2, [pc, #504]	; (800101c <HAL_RCC_OscConfig+0x4c8>)
 8000e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e2a:	f7ff fbfd 	bl	8000628 <HAL_GetTick>
 8000e2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e30:	e008      	b.n	8000e44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e32:	f7ff fbf9 	bl	8000628 <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b64      	cmp	r3, #100	; 0x64
 8000e3e:	d901      	bls.n	8000e44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e103      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e44:	4b75      	ldr	r3, [pc, #468]	; (800101c <HAL_RCC_OscConfig+0x4c8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0f0      	beq.n	8000e32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d106      	bne.n	8000e66 <HAL_RCC_OscConfig+0x312>
 8000e58:	4b6f      	ldr	r3, [pc, #444]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e5a:	6a1b      	ldr	r3, [r3, #32]
 8000e5c:	4a6e      	ldr	r2, [pc, #440]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6213      	str	r3, [r2, #32]
 8000e64:	e02d      	b.n	8000ec2 <HAL_RCC_OscConfig+0x36e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10c      	bne.n	8000e88 <HAL_RCC_OscConfig+0x334>
 8000e6e:	4b6a      	ldr	r3, [pc, #424]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e70:	6a1b      	ldr	r3, [r3, #32]
 8000e72:	4a69      	ldr	r2, [pc, #420]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e74:	f023 0301 	bic.w	r3, r3, #1
 8000e78:	6213      	str	r3, [r2, #32]
 8000e7a:	4b67      	ldr	r3, [pc, #412]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e7c:	6a1b      	ldr	r3, [r3, #32]
 8000e7e:	4a66      	ldr	r2, [pc, #408]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e80:	f023 0304 	bic.w	r3, r3, #4
 8000e84:	6213      	str	r3, [r2, #32]
 8000e86:	e01c      	b.n	8000ec2 <HAL_RCC_OscConfig+0x36e>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	2b05      	cmp	r3, #5
 8000e8e:	d10c      	bne.n	8000eaa <HAL_RCC_OscConfig+0x356>
 8000e90:	4b61      	ldr	r3, [pc, #388]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e92:	6a1b      	ldr	r3, [r3, #32]
 8000e94:	4a60      	ldr	r2, [pc, #384]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	6213      	str	r3, [r2, #32]
 8000e9c:	4b5e      	ldr	r3, [pc, #376]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e9e:	6a1b      	ldr	r3, [r3, #32]
 8000ea0:	4a5d      	ldr	r2, [pc, #372]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6213      	str	r3, [r2, #32]
 8000ea8:	e00b      	b.n	8000ec2 <HAL_RCC_OscConfig+0x36e>
 8000eaa:	4b5b      	ldr	r3, [pc, #364]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000eac:	6a1b      	ldr	r3, [r3, #32]
 8000eae:	4a5a      	ldr	r2, [pc, #360]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	f023 0301 	bic.w	r3, r3, #1
 8000eb4:	6213      	str	r3, [r2, #32]
 8000eb6:	4b58      	ldr	r3, [pc, #352]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	4a57      	ldr	r2, [pc, #348]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000ebc:	f023 0304 	bic.w	r3, r3, #4
 8000ec0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d015      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eca:	f7ff fbad 	bl	8000628 <HAL_GetTick>
 8000ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed0:	e00a      	b.n	8000ee8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ed2:	f7ff fba9 	bl	8000628 <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d901      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e0b1      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee8:	4b4b      	ldr	r3, [pc, #300]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0ee      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x37e>
 8000ef4:	e014      	b.n	8000f20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef6:	f7ff fb97 	bl	8000628 <HAL_GetTick>
 8000efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000efc:	e00a      	b.n	8000f14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000efe:	f7ff fb93 	bl	8000628 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e09b      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f14:	4b40      	ldr	r3, [pc, #256]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1ee      	bne.n	8000efe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f20:	7dfb      	ldrb	r3, [r7, #23]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d105      	bne.n	8000f32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f26:	4b3c      	ldr	r3, [pc, #240]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a3b      	ldr	r2, [pc, #236]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 8087 	beq.w	800104a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f3c:	4b36      	ldr	r3, [pc, #216]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 030c 	and.w	r3, r3, #12
 8000f44:	2b08      	cmp	r3, #8
 8000f46:	d061      	beq.n	800100c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d146      	bne.n	8000fde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f50:	4b33      	ldr	r3, [pc, #204]	; (8001020 <HAL_RCC_OscConfig+0x4cc>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f56:	f7ff fb67 	bl	8000628 <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f5e:	f7ff fb63 	bl	8000628 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e06d      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f70:	4b29      	ldr	r3, [pc, #164]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1f0      	bne.n	8000f5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
 8000f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f84:	d108      	bne.n	8000f98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f86:	4b24      	ldr	r3, [pc, #144]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	4921      	ldr	r1, [pc, #132]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	4313      	orrs	r3, r2
 8000f96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a19      	ldr	r1, [r3, #32]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa8:	430b      	orrs	r3, r1
 8000faa:	491b      	ldr	r1, [pc, #108]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_RCC_OscConfig+0x4cc>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb6:	f7ff fb37 	bl	8000628 <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fbe:	f7ff fb33 	bl	8000628 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e03d      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0f0      	beq.n	8000fbe <HAL_RCC_OscConfig+0x46a>
 8000fdc:	e035      	b.n	800104a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <HAL_RCC_OscConfig+0x4cc>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fb20 	bl	8000628 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fec:	f7ff fb1c 	bl	8000628 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e026      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f0      	bne.n	8000fec <HAL_RCC_OscConfig+0x498>
 800100a:	e01e      	b.n	800104a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d107      	bne.n	8001024 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e019      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
 8001018:	40021000 	.word	0x40021000
 800101c:	40007000 	.word	0x40007000
 8001020:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_RCC_OscConfig+0x500>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	429a      	cmp	r2, r3
 8001036:	d106      	bne.n	8001046 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001042:	429a      	cmp	r2, r3
 8001044:	d001      	beq.n	800104a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40021000 	.word	0x40021000

08001058 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e0d0      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800106c:	4b6a      	ldr	r3, [pc, #424]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	429a      	cmp	r2, r3
 8001078:	d910      	bls.n	800109c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800107a:	4b67      	ldr	r3, [pc, #412]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f023 0207 	bic.w	r2, r3, #7
 8001082:	4965      	ldr	r1, [pc, #404]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	4313      	orrs	r3, r2
 8001088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800108a:	4b63      	ldr	r3, [pc, #396]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d001      	beq.n	800109c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e0b8      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d020      	beq.n	80010ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d005      	beq.n	80010c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010b4:	4b59      	ldr	r3, [pc, #356]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	4a58      	ldr	r2, [pc, #352]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010cc:	4b53      	ldr	r3, [pc, #332]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	4a52      	ldr	r2, [pc, #328]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010d8:	4b50      	ldr	r3, [pc, #320]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	494d      	ldr	r1, [pc, #308]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010e6:	4313      	orrs	r3, r2
 80010e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d040      	beq.n	8001178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d107      	bne.n	800110e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fe:	4b47      	ldr	r3, [pc, #284]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d115      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e07f      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d107      	bne.n	8001126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001116:	4b41      	ldr	r3, [pc, #260]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d109      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e073      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001126:	4b3d      	ldr	r3, [pc, #244]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e06b      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001136:	4b39      	ldr	r3, [pc, #228]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f023 0203 	bic.w	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4936      	ldr	r1, [pc, #216]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001144:	4313      	orrs	r3, r2
 8001146:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001148:	f7ff fa6e 	bl	8000628 <HAL_GetTick>
 800114c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800114e:	e00a      	b.n	8001166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001150:	f7ff fa6a 	bl	8000628 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	f241 3288 	movw	r2, #5000	; 0x1388
 800115e:	4293      	cmp	r3, r2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e053      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001166:	4b2d      	ldr	r3, [pc, #180]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 020c 	and.w	r2, r3, #12
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	429a      	cmp	r2, r3
 8001176:	d1eb      	bne.n	8001150 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001178:	4b27      	ldr	r3, [pc, #156]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d210      	bcs.n	80011a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001186:	4b24      	ldr	r3, [pc, #144]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f023 0207 	bic.w	r2, r3, #7
 800118e:	4922      	ldr	r1, [pc, #136]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	4313      	orrs	r3, r2
 8001194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001196:	4b20      	ldr	r3, [pc, #128]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d001      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e032      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d008      	beq.n	80011c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	4916      	ldr	r1, [pc, #88]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d009      	beq.n	80011e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	490e      	ldr	r1, [pc, #56]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011e6:	f000 f821 	bl	800122c <HAL_RCC_GetSysClockFreq>
 80011ea:	4602      	mov	r2, r0
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	091b      	lsrs	r3, r3, #4
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	490a      	ldr	r1, [pc, #40]	; (8001220 <HAL_RCC_ClockConfig+0x1c8>)
 80011f8:	5ccb      	ldrb	r3, [r1, r3]
 80011fa:	fa22 f303 	lsr.w	r3, r2, r3
 80011fe:	4a09      	ldr	r2, [pc, #36]	; (8001224 <HAL_RCC_ClockConfig+0x1cc>)
 8001200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <HAL_RCC_ClockConfig+0x1d0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f9cc 	bl	80005a4 <HAL_InitTick>

  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40022000 	.word	0x40022000
 800121c:	40021000 	.word	0x40021000
 8001220:	08002188 	.word	0x08002188
 8001224:	20000000 	.word	0x20000000
 8001228:	20000004 	.word	0x20000004

0800122c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800122c:	b490      	push	{r4, r7}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001232:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001234:	1d3c      	adds	r4, r7, #4
 8001236:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001238:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800123c:	f240 2301 	movw	r3, #513	; 0x201
 8001240:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001256:	4b21      	ldr	r3, [pc, #132]	; (80012dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	2b04      	cmp	r3, #4
 8001264:	d002      	beq.n	800126c <HAL_RCC_GetSysClockFreq+0x40>
 8001266:	2b08      	cmp	r3, #8
 8001268:	d003      	beq.n	8001272 <HAL_RCC_GetSysClockFreq+0x46>
 800126a:	e02b      	b.n	80012c4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800126c:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800126e:	623b      	str	r3, [r7, #32]
      break;
 8001270:	e02b      	b.n	80012ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	0c9b      	lsrs	r3, r3, #18
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	3328      	adds	r3, #40	; 0x28
 800127c:	443b      	add	r3, r7
 800127e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001282:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d012      	beq.n	80012b4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	0c5b      	lsrs	r3, r3, #17
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	3328      	adds	r3, #40	; 0x28
 800129a:	443b      	add	r3, r7
 800129c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012a6:	fb03 f202 	mul.w	r2, r3, r2
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
 80012b2:	e004      	b.n	80012be <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012b8:	fb02 f303 	mul.w	r3, r2, r3
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	623b      	str	r3, [r7, #32]
      break;
 80012c2:	e002      	b.n	80012ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012c6:	623b      	str	r3, [r7, #32]
      break;
 80012c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012ca:	6a3b      	ldr	r3, [r7, #32]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3728      	adds	r7, #40	; 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc90      	pop	{r4, r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	08002178 	.word	0x08002178
 80012dc:	40021000 	.word	0x40021000
 80012e0:	007a1200 	.word	0x007a1200
 80012e4:	003d0900 	.word	0x003d0900

080012e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012ec:	4b02      	ldr	r3, [pc, #8]	; (80012f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	20000000 	.word	0x20000000

080012fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001300:	f7ff fff2 	bl	80012e8 <HAL_RCC_GetHCLKFreq>
 8001304:	4602      	mov	r2, r0
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	4903      	ldr	r1, [pc, #12]	; (8001320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001312:	5ccb      	ldrb	r3, [r1, r3]
 8001314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001318:	4618      	mov	r0, r3
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40021000 	.word	0x40021000
 8001320:	08002198 	.word	0x08002198

08001324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001328:	f7ff ffde 	bl	80012e8 <HAL_RCC_GetHCLKFreq>
 800132c:	4602      	mov	r2, r0
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	0adb      	lsrs	r3, r3, #11
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	4903      	ldr	r1, [pc, #12]	; (8001348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800133a:	5ccb      	ldrb	r3, [r1, r3]
 800133c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001340:	4618      	mov	r0, r3
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40021000 	.word	0x40021000
 8001348:	08002198 	.word	0x08002198

0800134c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <RCC_Delay+0x34>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <RCC_Delay+0x38>)
 800135a:	fba2 2303 	umull	r2, r3, r2, r3
 800135e:	0a5b      	lsrs	r3, r3, #9
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	fb02 f303 	mul.w	r3, r2, r3
 8001366:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001368:	bf00      	nop
  }
  while (Delay --);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1e5a      	subs	r2, r3, #1
 800136e:	60fa      	str	r2, [r7, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f9      	bne.n	8001368 <RCC_Delay+0x1c>
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	20000000 	.word	0x20000000
 8001384:	10624dd3 	.word	0x10624dd3

08001388 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e03f      	b.n	800141a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d106      	bne.n	80013b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7fe ffc0 	bl	8000334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2224      	movs	r2, #36	; 0x24
 80013b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f905 	bl	80015dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	691a      	ldr	r2, [r3, #16]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80013e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	695a      	ldr	r2, [r3, #20]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80013f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001400:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2220      	movs	r2, #32
 800140c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2220      	movs	r2, #32
 8001414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b08a      	sub	sp, #40	; 0x28
 8001426:	af02      	add	r7, sp, #8
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	4613      	mov	r3, r2
 8001430:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b20      	cmp	r3, #32
 8001440:	d17c      	bne.n	800153c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <HAL_UART_Transmit+0x2c>
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e075      	b.n	800153e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <HAL_UART_Transmit+0x3e>
 800145c:	2302      	movs	r3, #2
 800145e:	e06e      	b.n	800153e <HAL_UART_Transmit+0x11c>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2200      	movs	r2, #0
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2221      	movs	r2, #33	; 0x21
 8001472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001476:	f7ff f8d7 	bl	8000628 <HAL_GetTick>
 800147a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	88fa      	ldrh	r2, [r7, #6]
 8001480:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	88fa      	ldrh	r2, [r7, #6]
 8001486:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001490:	d108      	bne.n	80014a4 <HAL_UART_Transmit+0x82>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d104      	bne.n	80014a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	e003      	b.n	80014ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80014b4:	e02a      	b.n	800150c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2200      	movs	r2, #0
 80014be:	2180      	movs	r1, #128	; 0x80
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f000 f840 	bl	8001546 <UART_WaitOnFlagUntilTimeout>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e036      	b.n	800153e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10b      	bne.n	80014ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	3302      	adds	r3, #2
 80014ea:	61bb      	str	r3, [r7, #24]
 80014ec:	e007      	b.n	80014fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	781a      	ldrb	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	3301      	adds	r3, #1
 80014fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001502:	b29b      	uxth	r3, r3
 8001504:	3b01      	subs	r3, #1
 8001506:	b29a      	uxth	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001510:	b29b      	uxth	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1cf      	bne.n	80014b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2200      	movs	r2, #0
 800151e:	2140      	movs	r1, #64	; 0x40
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 f810 	bl	8001546 <UART_WaitOnFlagUntilTimeout>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e006      	b.n	800153e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2220      	movs	r2, #32
 8001534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	e000      	b.n	800153e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800153c:	2302      	movs	r3, #2
  }
}
 800153e:	4618      	mov	r0, r3
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af00      	add	r7, sp, #0
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	4613      	mov	r3, r2
 8001554:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001556:	e02c      	b.n	80015b2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155e:	d028      	beq.n	80015b2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <UART_WaitOnFlagUntilTimeout+0x30>
 8001566:	f7ff f85f 	bl	8000628 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	429a      	cmp	r2, r3
 8001574:	d21d      	bcs.n	80015b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001584:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0201 	bic.w	r2, r2, #1
 8001594:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2220      	movs	r2, #32
 800159a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2220      	movs	r2, #32
 80015a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e00f      	b.n	80015d2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4013      	ands	r3, r2
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	429a      	cmp	r2, r3
 80015c0:	bf0c      	ite	eq
 80015c2:	2301      	moveq	r3, #1
 80015c4:	2300      	movne	r3, #0
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d0c3      	beq.n	8001558 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	4313      	orrs	r3, r2
 800160a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001616:	f023 030c 	bic.w	r3, r3, #12
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	68b9      	ldr	r1, [r7, #8]
 8001620:	430b      	orrs	r3, r1
 8001622:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699a      	ldr	r2, [r3, #24]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a2c      	ldr	r2, [pc, #176]	; (80016f0 <UART_SetConfig+0x114>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d103      	bne.n	800164c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001644:	f7ff fe6e 	bl	8001324 <HAL_RCC_GetPCLK2Freq>
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	e002      	b.n	8001652 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800164c:	f7ff fe56 	bl	80012fc <HAL_RCC_GetPCLK1Freq>
 8001650:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	009a      	lsls	r2, r3, #2
 800165c:	441a      	add	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	fbb2 f3f3 	udiv	r3, r2, r3
 8001668:	4a22      	ldr	r2, [pc, #136]	; (80016f4 <UART_SetConfig+0x118>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	0119      	lsls	r1, r3, #4
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	009a      	lsls	r2, r3, #2
 800167c:	441a      	add	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	fbb2 f2f3 	udiv	r2, r2, r3
 8001688:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <UART_SetConfig+0x118>)
 800168a:	fba3 0302 	umull	r0, r3, r3, r2
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	2064      	movs	r0, #100	; 0x64
 8001692:	fb00 f303 	mul.w	r3, r0, r3
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	011b      	lsls	r3, r3, #4
 800169a:	3332      	adds	r3, #50	; 0x32
 800169c:	4a15      	ldr	r2, [pc, #84]	; (80016f4 <UART_SetConfig+0x118>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016a8:	4419      	add	r1, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	009a      	lsls	r2, r3, #2
 80016b4:	441a      	add	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <UART_SetConfig+0x118>)
 80016c2:	fba3 0302 	umull	r0, r3, r3, r2
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	2064      	movs	r0, #100	; 0x64
 80016ca:	fb00 f303 	mul.w	r3, r0, r3
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	011b      	lsls	r3, r3, #4
 80016d2:	3332      	adds	r3, #50	; 0x32
 80016d4:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <UART_SetConfig+0x118>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	095b      	lsrs	r3, r3, #5
 80016dc:	f003 020f 	and.w	r2, r3, #15
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	440a      	add	r2, r1
 80016e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40013800 	.word	0x40013800
 80016f4:	51eb851f 	.word	0x51eb851f

080016f8 <__errno>:
 80016f8:	4b01      	ldr	r3, [pc, #4]	; (8001700 <__errno+0x8>)
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	2000000c 	.word	0x2000000c

08001704 <__libc_init_array>:
 8001704:	b570      	push	{r4, r5, r6, lr}
 8001706:	2600      	movs	r6, #0
 8001708:	4d0c      	ldr	r5, [pc, #48]	; (800173c <__libc_init_array+0x38>)
 800170a:	4c0d      	ldr	r4, [pc, #52]	; (8001740 <__libc_init_array+0x3c>)
 800170c:	1b64      	subs	r4, r4, r5
 800170e:	10a4      	asrs	r4, r4, #2
 8001710:	42a6      	cmp	r6, r4
 8001712:	d109      	bne.n	8001728 <__libc_init_array+0x24>
 8001714:	f000 fd18 	bl	8002148 <_init>
 8001718:	2600      	movs	r6, #0
 800171a:	4d0a      	ldr	r5, [pc, #40]	; (8001744 <__libc_init_array+0x40>)
 800171c:	4c0a      	ldr	r4, [pc, #40]	; (8001748 <__libc_init_array+0x44>)
 800171e:	1b64      	subs	r4, r4, r5
 8001720:	10a4      	asrs	r4, r4, #2
 8001722:	42a6      	cmp	r6, r4
 8001724:	d105      	bne.n	8001732 <__libc_init_array+0x2e>
 8001726:	bd70      	pop	{r4, r5, r6, pc}
 8001728:	f855 3b04 	ldr.w	r3, [r5], #4
 800172c:	4798      	blx	r3
 800172e:	3601      	adds	r6, #1
 8001730:	e7ee      	b.n	8001710 <__libc_init_array+0xc>
 8001732:	f855 3b04 	ldr.w	r3, [r5], #4
 8001736:	4798      	blx	r3
 8001738:	3601      	adds	r6, #1
 800173a:	e7f2      	b.n	8001722 <__libc_init_array+0x1e>
 800173c:	08002204 	.word	0x08002204
 8001740:	08002204 	.word	0x08002204
 8001744:	08002204 	.word	0x08002204
 8001748:	08002208 	.word	0x08002208

0800174c <memset>:
 800174c:	4603      	mov	r3, r0
 800174e:	4402      	add	r2, r0
 8001750:	4293      	cmp	r3, r2
 8001752:	d100      	bne.n	8001756 <memset+0xa>
 8001754:	4770      	bx	lr
 8001756:	f803 1b01 	strb.w	r1, [r3], #1
 800175a:	e7f9      	b.n	8001750 <memset+0x4>

0800175c <_puts_r>:
 800175c:	b570      	push	{r4, r5, r6, lr}
 800175e:	460e      	mov	r6, r1
 8001760:	4605      	mov	r5, r0
 8001762:	b118      	cbz	r0, 800176c <_puts_r+0x10>
 8001764:	6983      	ldr	r3, [r0, #24]
 8001766:	b90b      	cbnz	r3, 800176c <_puts_r+0x10>
 8001768:	f000 fa44 	bl	8001bf4 <__sinit>
 800176c:	69ab      	ldr	r3, [r5, #24]
 800176e:	68ac      	ldr	r4, [r5, #8]
 8001770:	b913      	cbnz	r3, 8001778 <_puts_r+0x1c>
 8001772:	4628      	mov	r0, r5
 8001774:	f000 fa3e 	bl	8001bf4 <__sinit>
 8001778:	4b2c      	ldr	r3, [pc, #176]	; (800182c <_puts_r+0xd0>)
 800177a:	429c      	cmp	r4, r3
 800177c:	d120      	bne.n	80017c0 <_puts_r+0x64>
 800177e:	686c      	ldr	r4, [r5, #4]
 8001780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001782:	07db      	lsls	r3, r3, #31
 8001784:	d405      	bmi.n	8001792 <_puts_r+0x36>
 8001786:	89a3      	ldrh	r3, [r4, #12]
 8001788:	0598      	lsls	r0, r3, #22
 800178a:	d402      	bmi.n	8001792 <_puts_r+0x36>
 800178c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800178e:	f000 facf 	bl	8001d30 <__retarget_lock_acquire_recursive>
 8001792:	89a3      	ldrh	r3, [r4, #12]
 8001794:	0719      	lsls	r1, r3, #28
 8001796:	d51d      	bpl.n	80017d4 <_puts_r+0x78>
 8001798:	6923      	ldr	r3, [r4, #16]
 800179a:	b1db      	cbz	r3, 80017d4 <_puts_r+0x78>
 800179c:	3e01      	subs	r6, #1
 800179e:	68a3      	ldr	r3, [r4, #8]
 80017a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80017a4:	3b01      	subs	r3, #1
 80017a6:	60a3      	str	r3, [r4, #8]
 80017a8:	bb39      	cbnz	r1, 80017fa <_puts_r+0x9e>
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	da38      	bge.n	8001820 <_puts_r+0xc4>
 80017ae:	4622      	mov	r2, r4
 80017b0:	210a      	movs	r1, #10
 80017b2:	4628      	mov	r0, r5
 80017b4:	f000 f848 	bl	8001848 <__swbuf_r>
 80017b8:	3001      	adds	r0, #1
 80017ba:	d011      	beq.n	80017e0 <_puts_r+0x84>
 80017bc:	250a      	movs	r5, #10
 80017be:	e011      	b.n	80017e4 <_puts_r+0x88>
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <_puts_r+0xd4>)
 80017c2:	429c      	cmp	r4, r3
 80017c4:	d101      	bne.n	80017ca <_puts_r+0x6e>
 80017c6:	68ac      	ldr	r4, [r5, #8]
 80017c8:	e7da      	b.n	8001780 <_puts_r+0x24>
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <_puts_r+0xd8>)
 80017cc:	429c      	cmp	r4, r3
 80017ce:	bf08      	it	eq
 80017d0:	68ec      	ldreq	r4, [r5, #12]
 80017d2:	e7d5      	b.n	8001780 <_puts_r+0x24>
 80017d4:	4621      	mov	r1, r4
 80017d6:	4628      	mov	r0, r5
 80017d8:	f000 f888 	bl	80018ec <__swsetup_r>
 80017dc:	2800      	cmp	r0, #0
 80017de:	d0dd      	beq.n	800179c <_puts_r+0x40>
 80017e0:	f04f 35ff 	mov.w	r5, #4294967295
 80017e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017e6:	07da      	lsls	r2, r3, #31
 80017e8:	d405      	bmi.n	80017f6 <_puts_r+0x9a>
 80017ea:	89a3      	ldrh	r3, [r4, #12]
 80017ec:	059b      	lsls	r3, r3, #22
 80017ee:	d402      	bmi.n	80017f6 <_puts_r+0x9a>
 80017f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017f2:	f000 fa9e 	bl	8001d32 <__retarget_lock_release_recursive>
 80017f6:	4628      	mov	r0, r5
 80017f8:	bd70      	pop	{r4, r5, r6, pc}
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	da04      	bge.n	8001808 <_puts_r+0xac>
 80017fe:	69a2      	ldr	r2, [r4, #24]
 8001800:	429a      	cmp	r2, r3
 8001802:	dc06      	bgt.n	8001812 <_puts_r+0xb6>
 8001804:	290a      	cmp	r1, #10
 8001806:	d004      	beq.n	8001812 <_puts_r+0xb6>
 8001808:	6823      	ldr	r3, [r4, #0]
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	6022      	str	r2, [r4, #0]
 800180e:	7019      	strb	r1, [r3, #0]
 8001810:	e7c5      	b.n	800179e <_puts_r+0x42>
 8001812:	4622      	mov	r2, r4
 8001814:	4628      	mov	r0, r5
 8001816:	f000 f817 	bl	8001848 <__swbuf_r>
 800181a:	3001      	adds	r0, #1
 800181c:	d1bf      	bne.n	800179e <_puts_r+0x42>
 800181e:	e7df      	b.n	80017e0 <_puts_r+0x84>
 8001820:	250a      	movs	r5, #10
 8001822:	6823      	ldr	r3, [r4, #0]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	6022      	str	r2, [r4, #0]
 8001828:	701d      	strb	r5, [r3, #0]
 800182a:	e7db      	b.n	80017e4 <_puts_r+0x88>
 800182c:	080021c4 	.word	0x080021c4
 8001830:	080021e4 	.word	0x080021e4
 8001834:	080021a4 	.word	0x080021a4

08001838 <puts>:
 8001838:	4b02      	ldr	r3, [pc, #8]	; (8001844 <puts+0xc>)
 800183a:	4601      	mov	r1, r0
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	f7ff bf8d 	b.w	800175c <_puts_r>
 8001842:	bf00      	nop
 8001844:	2000000c 	.word	0x2000000c

08001848 <__swbuf_r>:
 8001848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184a:	460e      	mov	r6, r1
 800184c:	4614      	mov	r4, r2
 800184e:	4605      	mov	r5, r0
 8001850:	b118      	cbz	r0, 800185a <__swbuf_r+0x12>
 8001852:	6983      	ldr	r3, [r0, #24]
 8001854:	b90b      	cbnz	r3, 800185a <__swbuf_r+0x12>
 8001856:	f000 f9cd 	bl	8001bf4 <__sinit>
 800185a:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <__swbuf_r+0x98>)
 800185c:	429c      	cmp	r4, r3
 800185e:	d12b      	bne.n	80018b8 <__swbuf_r+0x70>
 8001860:	686c      	ldr	r4, [r5, #4]
 8001862:	69a3      	ldr	r3, [r4, #24]
 8001864:	60a3      	str	r3, [r4, #8]
 8001866:	89a3      	ldrh	r3, [r4, #12]
 8001868:	071a      	lsls	r2, r3, #28
 800186a:	d52f      	bpl.n	80018cc <__swbuf_r+0x84>
 800186c:	6923      	ldr	r3, [r4, #16]
 800186e:	b36b      	cbz	r3, 80018cc <__swbuf_r+0x84>
 8001870:	6923      	ldr	r3, [r4, #16]
 8001872:	6820      	ldr	r0, [r4, #0]
 8001874:	b2f6      	uxtb	r6, r6
 8001876:	1ac0      	subs	r0, r0, r3
 8001878:	6963      	ldr	r3, [r4, #20]
 800187a:	4637      	mov	r7, r6
 800187c:	4283      	cmp	r3, r0
 800187e:	dc04      	bgt.n	800188a <__swbuf_r+0x42>
 8001880:	4621      	mov	r1, r4
 8001882:	4628      	mov	r0, r5
 8001884:	f000 f922 	bl	8001acc <_fflush_r>
 8001888:	bb30      	cbnz	r0, 80018d8 <__swbuf_r+0x90>
 800188a:	68a3      	ldr	r3, [r4, #8]
 800188c:	3001      	adds	r0, #1
 800188e:	3b01      	subs	r3, #1
 8001890:	60a3      	str	r3, [r4, #8]
 8001892:	6823      	ldr	r3, [r4, #0]
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	6022      	str	r2, [r4, #0]
 8001898:	701e      	strb	r6, [r3, #0]
 800189a:	6963      	ldr	r3, [r4, #20]
 800189c:	4283      	cmp	r3, r0
 800189e:	d004      	beq.n	80018aa <__swbuf_r+0x62>
 80018a0:	89a3      	ldrh	r3, [r4, #12]
 80018a2:	07db      	lsls	r3, r3, #31
 80018a4:	d506      	bpl.n	80018b4 <__swbuf_r+0x6c>
 80018a6:	2e0a      	cmp	r6, #10
 80018a8:	d104      	bne.n	80018b4 <__swbuf_r+0x6c>
 80018aa:	4621      	mov	r1, r4
 80018ac:	4628      	mov	r0, r5
 80018ae:	f000 f90d 	bl	8001acc <_fflush_r>
 80018b2:	b988      	cbnz	r0, 80018d8 <__swbuf_r+0x90>
 80018b4:	4638      	mov	r0, r7
 80018b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <__swbuf_r+0x9c>)
 80018ba:	429c      	cmp	r4, r3
 80018bc:	d101      	bne.n	80018c2 <__swbuf_r+0x7a>
 80018be:	68ac      	ldr	r4, [r5, #8]
 80018c0:	e7cf      	b.n	8001862 <__swbuf_r+0x1a>
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <__swbuf_r+0xa0>)
 80018c4:	429c      	cmp	r4, r3
 80018c6:	bf08      	it	eq
 80018c8:	68ec      	ldreq	r4, [r5, #12]
 80018ca:	e7ca      	b.n	8001862 <__swbuf_r+0x1a>
 80018cc:	4621      	mov	r1, r4
 80018ce:	4628      	mov	r0, r5
 80018d0:	f000 f80c 	bl	80018ec <__swsetup_r>
 80018d4:	2800      	cmp	r0, #0
 80018d6:	d0cb      	beq.n	8001870 <__swbuf_r+0x28>
 80018d8:	f04f 37ff 	mov.w	r7, #4294967295
 80018dc:	e7ea      	b.n	80018b4 <__swbuf_r+0x6c>
 80018de:	bf00      	nop
 80018e0:	080021c4 	.word	0x080021c4
 80018e4:	080021e4 	.word	0x080021e4
 80018e8:	080021a4 	.word	0x080021a4

080018ec <__swsetup_r>:
 80018ec:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <__swsetup_r+0xcc>)
 80018ee:	b570      	push	{r4, r5, r6, lr}
 80018f0:	681d      	ldr	r5, [r3, #0]
 80018f2:	4606      	mov	r6, r0
 80018f4:	460c      	mov	r4, r1
 80018f6:	b125      	cbz	r5, 8001902 <__swsetup_r+0x16>
 80018f8:	69ab      	ldr	r3, [r5, #24]
 80018fa:	b913      	cbnz	r3, 8001902 <__swsetup_r+0x16>
 80018fc:	4628      	mov	r0, r5
 80018fe:	f000 f979 	bl	8001bf4 <__sinit>
 8001902:	4b2e      	ldr	r3, [pc, #184]	; (80019bc <__swsetup_r+0xd0>)
 8001904:	429c      	cmp	r4, r3
 8001906:	d10f      	bne.n	8001928 <__swsetup_r+0x3c>
 8001908:	686c      	ldr	r4, [r5, #4]
 800190a:	89a3      	ldrh	r3, [r4, #12]
 800190c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001910:	0719      	lsls	r1, r3, #28
 8001912:	d42c      	bmi.n	800196e <__swsetup_r+0x82>
 8001914:	06dd      	lsls	r5, r3, #27
 8001916:	d411      	bmi.n	800193c <__swsetup_r+0x50>
 8001918:	2309      	movs	r3, #9
 800191a:	6033      	str	r3, [r6, #0]
 800191c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	81a3      	strh	r3, [r4, #12]
 8001926:	e03e      	b.n	80019a6 <__swsetup_r+0xba>
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <__swsetup_r+0xd4>)
 800192a:	429c      	cmp	r4, r3
 800192c:	d101      	bne.n	8001932 <__swsetup_r+0x46>
 800192e:	68ac      	ldr	r4, [r5, #8]
 8001930:	e7eb      	b.n	800190a <__swsetup_r+0x1e>
 8001932:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <__swsetup_r+0xd8>)
 8001934:	429c      	cmp	r4, r3
 8001936:	bf08      	it	eq
 8001938:	68ec      	ldreq	r4, [r5, #12]
 800193a:	e7e6      	b.n	800190a <__swsetup_r+0x1e>
 800193c:	0758      	lsls	r0, r3, #29
 800193e:	d512      	bpl.n	8001966 <__swsetup_r+0x7a>
 8001940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001942:	b141      	cbz	r1, 8001956 <__swsetup_r+0x6a>
 8001944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001948:	4299      	cmp	r1, r3
 800194a:	d002      	beq.n	8001952 <__swsetup_r+0x66>
 800194c:	4630      	mov	r0, r6
 800194e:	f000 fa57 	bl	8001e00 <_free_r>
 8001952:	2300      	movs	r3, #0
 8001954:	6363      	str	r3, [r4, #52]	; 0x34
 8001956:	89a3      	ldrh	r3, [r4, #12]
 8001958:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800195c:	81a3      	strh	r3, [r4, #12]
 800195e:	2300      	movs	r3, #0
 8001960:	6063      	str	r3, [r4, #4]
 8001962:	6923      	ldr	r3, [r4, #16]
 8001964:	6023      	str	r3, [r4, #0]
 8001966:	89a3      	ldrh	r3, [r4, #12]
 8001968:	f043 0308 	orr.w	r3, r3, #8
 800196c:	81a3      	strh	r3, [r4, #12]
 800196e:	6923      	ldr	r3, [r4, #16]
 8001970:	b94b      	cbnz	r3, 8001986 <__swsetup_r+0x9a>
 8001972:	89a3      	ldrh	r3, [r4, #12]
 8001974:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800197c:	d003      	beq.n	8001986 <__swsetup_r+0x9a>
 800197e:	4621      	mov	r1, r4
 8001980:	4630      	mov	r0, r6
 8001982:	f000 f9fd 	bl	8001d80 <__smakebuf_r>
 8001986:	89a0      	ldrh	r0, [r4, #12]
 8001988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800198c:	f010 0301 	ands.w	r3, r0, #1
 8001990:	d00a      	beq.n	80019a8 <__swsetup_r+0xbc>
 8001992:	2300      	movs	r3, #0
 8001994:	60a3      	str	r3, [r4, #8]
 8001996:	6963      	ldr	r3, [r4, #20]
 8001998:	425b      	negs	r3, r3
 800199a:	61a3      	str	r3, [r4, #24]
 800199c:	6923      	ldr	r3, [r4, #16]
 800199e:	b943      	cbnz	r3, 80019b2 <__swsetup_r+0xc6>
 80019a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80019a4:	d1ba      	bne.n	800191c <__swsetup_r+0x30>
 80019a6:	bd70      	pop	{r4, r5, r6, pc}
 80019a8:	0781      	lsls	r1, r0, #30
 80019aa:	bf58      	it	pl
 80019ac:	6963      	ldrpl	r3, [r4, #20]
 80019ae:	60a3      	str	r3, [r4, #8]
 80019b0:	e7f4      	b.n	800199c <__swsetup_r+0xb0>
 80019b2:	2000      	movs	r0, #0
 80019b4:	e7f7      	b.n	80019a6 <__swsetup_r+0xba>
 80019b6:	bf00      	nop
 80019b8:	2000000c 	.word	0x2000000c
 80019bc:	080021c4 	.word	0x080021c4
 80019c0:	080021e4 	.word	0x080021e4
 80019c4:	080021a4 	.word	0x080021a4

080019c8 <__sflush_r>:
 80019c8:	898a      	ldrh	r2, [r1, #12]
 80019ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019cc:	4605      	mov	r5, r0
 80019ce:	0710      	lsls	r0, r2, #28
 80019d0:	460c      	mov	r4, r1
 80019d2:	d457      	bmi.n	8001a84 <__sflush_r+0xbc>
 80019d4:	684b      	ldr	r3, [r1, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	dc04      	bgt.n	80019e4 <__sflush_r+0x1c>
 80019da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80019dc:	2b00      	cmp	r3, #0
 80019de:	dc01      	bgt.n	80019e4 <__sflush_r+0x1c>
 80019e0:	2000      	movs	r0, #0
 80019e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019e6:	2e00      	cmp	r6, #0
 80019e8:	d0fa      	beq.n	80019e0 <__sflush_r+0x18>
 80019ea:	2300      	movs	r3, #0
 80019ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80019f0:	682f      	ldr	r7, [r5, #0]
 80019f2:	602b      	str	r3, [r5, #0]
 80019f4:	d032      	beq.n	8001a5c <__sflush_r+0x94>
 80019f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019f8:	89a3      	ldrh	r3, [r4, #12]
 80019fa:	075a      	lsls	r2, r3, #29
 80019fc:	d505      	bpl.n	8001a0a <__sflush_r+0x42>
 80019fe:	6863      	ldr	r3, [r4, #4]
 8001a00:	1ac0      	subs	r0, r0, r3
 8001a02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a04:	b10b      	cbz	r3, 8001a0a <__sflush_r+0x42>
 8001a06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a08:	1ac0      	subs	r0, r0, r3
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a10:	4628      	mov	r0, r5
 8001a12:	6a21      	ldr	r1, [r4, #32]
 8001a14:	47b0      	blx	r6
 8001a16:	1c43      	adds	r3, r0, #1
 8001a18:	89a3      	ldrh	r3, [r4, #12]
 8001a1a:	d106      	bne.n	8001a2a <__sflush_r+0x62>
 8001a1c:	6829      	ldr	r1, [r5, #0]
 8001a1e:	291d      	cmp	r1, #29
 8001a20:	d82c      	bhi.n	8001a7c <__sflush_r+0xb4>
 8001a22:	4a29      	ldr	r2, [pc, #164]	; (8001ac8 <__sflush_r+0x100>)
 8001a24:	40ca      	lsrs	r2, r1
 8001a26:	07d6      	lsls	r6, r2, #31
 8001a28:	d528      	bpl.n	8001a7c <__sflush_r+0xb4>
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	6062      	str	r2, [r4, #4]
 8001a2e:	6922      	ldr	r2, [r4, #16]
 8001a30:	04d9      	lsls	r1, r3, #19
 8001a32:	6022      	str	r2, [r4, #0]
 8001a34:	d504      	bpl.n	8001a40 <__sflush_r+0x78>
 8001a36:	1c42      	adds	r2, r0, #1
 8001a38:	d101      	bne.n	8001a3e <__sflush_r+0x76>
 8001a3a:	682b      	ldr	r3, [r5, #0]
 8001a3c:	b903      	cbnz	r3, 8001a40 <__sflush_r+0x78>
 8001a3e:	6560      	str	r0, [r4, #84]	; 0x54
 8001a40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a42:	602f      	str	r7, [r5, #0]
 8001a44:	2900      	cmp	r1, #0
 8001a46:	d0cb      	beq.n	80019e0 <__sflush_r+0x18>
 8001a48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a4c:	4299      	cmp	r1, r3
 8001a4e:	d002      	beq.n	8001a56 <__sflush_r+0x8e>
 8001a50:	4628      	mov	r0, r5
 8001a52:	f000 f9d5 	bl	8001e00 <_free_r>
 8001a56:	2000      	movs	r0, #0
 8001a58:	6360      	str	r0, [r4, #52]	; 0x34
 8001a5a:	e7c2      	b.n	80019e2 <__sflush_r+0x1a>
 8001a5c:	6a21      	ldr	r1, [r4, #32]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	4628      	mov	r0, r5
 8001a62:	47b0      	blx	r6
 8001a64:	1c41      	adds	r1, r0, #1
 8001a66:	d1c7      	bne.n	80019f8 <__sflush_r+0x30>
 8001a68:	682b      	ldr	r3, [r5, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0c4      	beq.n	80019f8 <__sflush_r+0x30>
 8001a6e:	2b1d      	cmp	r3, #29
 8001a70:	d001      	beq.n	8001a76 <__sflush_r+0xae>
 8001a72:	2b16      	cmp	r3, #22
 8001a74:	d101      	bne.n	8001a7a <__sflush_r+0xb2>
 8001a76:	602f      	str	r7, [r5, #0]
 8001a78:	e7b2      	b.n	80019e0 <__sflush_r+0x18>
 8001a7a:	89a3      	ldrh	r3, [r4, #12]
 8001a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a80:	81a3      	strh	r3, [r4, #12]
 8001a82:	e7ae      	b.n	80019e2 <__sflush_r+0x1a>
 8001a84:	690f      	ldr	r7, [r1, #16]
 8001a86:	2f00      	cmp	r7, #0
 8001a88:	d0aa      	beq.n	80019e0 <__sflush_r+0x18>
 8001a8a:	0793      	lsls	r3, r2, #30
 8001a8c:	bf18      	it	ne
 8001a8e:	2300      	movne	r3, #0
 8001a90:	680e      	ldr	r6, [r1, #0]
 8001a92:	bf08      	it	eq
 8001a94:	694b      	ldreq	r3, [r1, #20]
 8001a96:	1bf6      	subs	r6, r6, r7
 8001a98:	600f      	str	r7, [r1, #0]
 8001a9a:	608b      	str	r3, [r1, #8]
 8001a9c:	2e00      	cmp	r6, #0
 8001a9e:	dd9f      	ble.n	80019e0 <__sflush_r+0x18>
 8001aa0:	4633      	mov	r3, r6
 8001aa2:	463a      	mov	r2, r7
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	6a21      	ldr	r1, [r4, #32]
 8001aa8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001aac:	47e0      	blx	ip
 8001aae:	2800      	cmp	r0, #0
 8001ab0:	dc06      	bgt.n	8001ac0 <__sflush_r+0xf8>
 8001ab2:	89a3      	ldrh	r3, [r4, #12]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001abc:	81a3      	strh	r3, [r4, #12]
 8001abe:	e790      	b.n	80019e2 <__sflush_r+0x1a>
 8001ac0:	4407      	add	r7, r0
 8001ac2:	1a36      	subs	r6, r6, r0
 8001ac4:	e7ea      	b.n	8001a9c <__sflush_r+0xd4>
 8001ac6:	bf00      	nop
 8001ac8:	20400001 	.word	0x20400001

08001acc <_fflush_r>:
 8001acc:	b538      	push	{r3, r4, r5, lr}
 8001ace:	690b      	ldr	r3, [r1, #16]
 8001ad0:	4605      	mov	r5, r0
 8001ad2:	460c      	mov	r4, r1
 8001ad4:	b913      	cbnz	r3, 8001adc <_fflush_r+0x10>
 8001ad6:	2500      	movs	r5, #0
 8001ad8:	4628      	mov	r0, r5
 8001ada:	bd38      	pop	{r3, r4, r5, pc}
 8001adc:	b118      	cbz	r0, 8001ae6 <_fflush_r+0x1a>
 8001ade:	6983      	ldr	r3, [r0, #24]
 8001ae0:	b90b      	cbnz	r3, 8001ae6 <_fflush_r+0x1a>
 8001ae2:	f000 f887 	bl	8001bf4 <__sinit>
 8001ae6:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <_fflush_r+0x6c>)
 8001ae8:	429c      	cmp	r4, r3
 8001aea:	d11b      	bne.n	8001b24 <_fflush_r+0x58>
 8001aec:	686c      	ldr	r4, [r5, #4]
 8001aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0ef      	beq.n	8001ad6 <_fflush_r+0xa>
 8001af6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001af8:	07d0      	lsls	r0, r2, #31
 8001afa:	d404      	bmi.n	8001b06 <_fflush_r+0x3a>
 8001afc:	0599      	lsls	r1, r3, #22
 8001afe:	d402      	bmi.n	8001b06 <_fflush_r+0x3a>
 8001b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b02:	f000 f915 	bl	8001d30 <__retarget_lock_acquire_recursive>
 8001b06:	4628      	mov	r0, r5
 8001b08:	4621      	mov	r1, r4
 8001b0a:	f7ff ff5d 	bl	80019c8 <__sflush_r>
 8001b0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b10:	4605      	mov	r5, r0
 8001b12:	07da      	lsls	r2, r3, #31
 8001b14:	d4e0      	bmi.n	8001ad8 <_fflush_r+0xc>
 8001b16:	89a3      	ldrh	r3, [r4, #12]
 8001b18:	059b      	lsls	r3, r3, #22
 8001b1a:	d4dd      	bmi.n	8001ad8 <_fflush_r+0xc>
 8001b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b1e:	f000 f908 	bl	8001d32 <__retarget_lock_release_recursive>
 8001b22:	e7d9      	b.n	8001ad8 <_fflush_r+0xc>
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <_fflush_r+0x70>)
 8001b26:	429c      	cmp	r4, r3
 8001b28:	d101      	bne.n	8001b2e <_fflush_r+0x62>
 8001b2a:	68ac      	ldr	r4, [r5, #8]
 8001b2c:	e7df      	b.n	8001aee <_fflush_r+0x22>
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <_fflush_r+0x74>)
 8001b30:	429c      	cmp	r4, r3
 8001b32:	bf08      	it	eq
 8001b34:	68ec      	ldreq	r4, [r5, #12]
 8001b36:	e7da      	b.n	8001aee <_fflush_r+0x22>
 8001b38:	080021c4 	.word	0x080021c4
 8001b3c:	080021e4 	.word	0x080021e4
 8001b40:	080021a4 	.word	0x080021a4

08001b44 <std>:
 8001b44:	2300      	movs	r3, #0
 8001b46:	b510      	push	{r4, lr}
 8001b48:	4604      	mov	r4, r0
 8001b4a:	e9c0 3300 	strd	r3, r3, [r0]
 8001b4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b52:	6083      	str	r3, [r0, #8]
 8001b54:	8181      	strh	r1, [r0, #12]
 8001b56:	6643      	str	r3, [r0, #100]	; 0x64
 8001b58:	81c2      	strh	r2, [r0, #14]
 8001b5a:	6183      	str	r3, [r0, #24]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	2208      	movs	r2, #8
 8001b60:	305c      	adds	r0, #92	; 0x5c
 8001b62:	f7ff fdf3 	bl	800174c <memset>
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <std+0x38>)
 8001b68:	6224      	str	r4, [r4, #32]
 8001b6a:	6263      	str	r3, [r4, #36]	; 0x24
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <std+0x3c>)
 8001b6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <std+0x40>)
 8001b72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <std+0x44>)
 8001b76:	6323      	str	r3, [r4, #48]	; 0x30
 8001b78:	bd10      	pop	{r4, pc}
 8001b7a:	bf00      	nop
 8001b7c:	08001fd9 	.word	0x08001fd9
 8001b80:	08001ffb 	.word	0x08001ffb
 8001b84:	08002033 	.word	0x08002033
 8001b88:	08002057 	.word	0x08002057

08001b8c <_cleanup_r>:
 8001b8c:	4901      	ldr	r1, [pc, #4]	; (8001b94 <_cleanup_r+0x8>)
 8001b8e:	f000 b8af 	b.w	8001cf0 <_fwalk_reent>
 8001b92:	bf00      	nop
 8001b94:	08001acd 	.word	0x08001acd

08001b98 <__sfmoreglue>:
 8001b98:	2268      	movs	r2, #104	; 0x68
 8001b9a:	b570      	push	{r4, r5, r6, lr}
 8001b9c:	1e4d      	subs	r5, r1, #1
 8001b9e:	4355      	muls	r5, r2
 8001ba0:	460e      	mov	r6, r1
 8001ba2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001ba6:	f000 f993 	bl	8001ed0 <_malloc_r>
 8001baa:	4604      	mov	r4, r0
 8001bac:	b140      	cbz	r0, 8001bc0 <__sfmoreglue+0x28>
 8001bae:	2100      	movs	r1, #0
 8001bb0:	e9c0 1600 	strd	r1, r6, [r0]
 8001bb4:	300c      	adds	r0, #12
 8001bb6:	60a0      	str	r0, [r4, #8]
 8001bb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001bbc:	f7ff fdc6 	bl	800174c <memset>
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	bd70      	pop	{r4, r5, r6, pc}

08001bc4 <__sfp_lock_acquire>:
 8001bc4:	4801      	ldr	r0, [pc, #4]	; (8001bcc <__sfp_lock_acquire+0x8>)
 8001bc6:	f000 b8b3 	b.w	8001d30 <__retarget_lock_acquire_recursive>
 8001bca:	bf00      	nop
 8001bcc:	200000d9 	.word	0x200000d9

08001bd0 <__sfp_lock_release>:
 8001bd0:	4801      	ldr	r0, [pc, #4]	; (8001bd8 <__sfp_lock_release+0x8>)
 8001bd2:	f000 b8ae 	b.w	8001d32 <__retarget_lock_release_recursive>
 8001bd6:	bf00      	nop
 8001bd8:	200000d9 	.word	0x200000d9

08001bdc <__sinit_lock_acquire>:
 8001bdc:	4801      	ldr	r0, [pc, #4]	; (8001be4 <__sinit_lock_acquire+0x8>)
 8001bde:	f000 b8a7 	b.w	8001d30 <__retarget_lock_acquire_recursive>
 8001be2:	bf00      	nop
 8001be4:	200000da 	.word	0x200000da

08001be8 <__sinit_lock_release>:
 8001be8:	4801      	ldr	r0, [pc, #4]	; (8001bf0 <__sinit_lock_release+0x8>)
 8001bea:	f000 b8a2 	b.w	8001d32 <__retarget_lock_release_recursive>
 8001bee:	bf00      	nop
 8001bf0:	200000da 	.word	0x200000da

08001bf4 <__sinit>:
 8001bf4:	b510      	push	{r4, lr}
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	f7ff fff0 	bl	8001bdc <__sinit_lock_acquire>
 8001bfc:	69a3      	ldr	r3, [r4, #24]
 8001bfe:	b11b      	cbz	r3, 8001c08 <__sinit+0x14>
 8001c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c04:	f7ff bff0 	b.w	8001be8 <__sinit_lock_release>
 8001c08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001c0c:	6523      	str	r3, [r4, #80]	; 0x50
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <__sinit+0x68>)
 8001c10:	4a13      	ldr	r2, [pc, #76]	; (8001c60 <__sinit+0x6c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	62a2      	str	r2, [r4, #40]	; 0x28
 8001c16:	42a3      	cmp	r3, r4
 8001c18:	bf08      	it	eq
 8001c1a:	2301      	moveq	r3, #1
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	bf08      	it	eq
 8001c20:	61a3      	streq	r3, [r4, #24]
 8001c22:	f000 f81f 	bl	8001c64 <__sfp>
 8001c26:	6060      	str	r0, [r4, #4]
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f000 f81b 	bl	8001c64 <__sfp>
 8001c2e:	60a0      	str	r0, [r4, #8]
 8001c30:	4620      	mov	r0, r4
 8001c32:	f000 f817 	bl	8001c64 <__sfp>
 8001c36:	2200      	movs	r2, #0
 8001c38:	2104      	movs	r1, #4
 8001c3a:	60e0      	str	r0, [r4, #12]
 8001c3c:	6860      	ldr	r0, [r4, #4]
 8001c3e:	f7ff ff81 	bl	8001b44 <std>
 8001c42:	2201      	movs	r2, #1
 8001c44:	2109      	movs	r1, #9
 8001c46:	68a0      	ldr	r0, [r4, #8]
 8001c48:	f7ff ff7c 	bl	8001b44 <std>
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	2112      	movs	r1, #18
 8001c50:	68e0      	ldr	r0, [r4, #12]
 8001c52:	f7ff ff77 	bl	8001b44 <std>
 8001c56:	2301      	movs	r3, #1
 8001c58:	61a3      	str	r3, [r4, #24]
 8001c5a:	e7d1      	b.n	8001c00 <__sinit+0xc>
 8001c5c:	080021a0 	.word	0x080021a0
 8001c60:	08001b8d 	.word	0x08001b8d

08001c64 <__sfp>:
 8001c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c66:	4607      	mov	r7, r0
 8001c68:	f7ff ffac 	bl	8001bc4 <__sfp_lock_acquire>
 8001c6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <__sfp+0x84>)
 8001c6e:	681e      	ldr	r6, [r3, #0]
 8001c70:	69b3      	ldr	r3, [r6, #24]
 8001c72:	b913      	cbnz	r3, 8001c7a <__sfp+0x16>
 8001c74:	4630      	mov	r0, r6
 8001c76:	f7ff ffbd 	bl	8001bf4 <__sinit>
 8001c7a:	3648      	adds	r6, #72	; 0x48
 8001c7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001c80:	3b01      	subs	r3, #1
 8001c82:	d503      	bpl.n	8001c8c <__sfp+0x28>
 8001c84:	6833      	ldr	r3, [r6, #0]
 8001c86:	b30b      	cbz	r3, 8001ccc <__sfp+0x68>
 8001c88:	6836      	ldr	r6, [r6, #0]
 8001c8a:	e7f7      	b.n	8001c7c <__sfp+0x18>
 8001c8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c90:	b9d5      	cbnz	r5, 8001cc8 <__sfp+0x64>
 8001c92:	4b16      	ldr	r3, [pc, #88]	; (8001cec <__sfp+0x88>)
 8001c94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001c98:	60e3      	str	r3, [r4, #12]
 8001c9a:	6665      	str	r5, [r4, #100]	; 0x64
 8001c9c:	f000 f847 	bl	8001d2e <__retarget_lock_init_recursive>
 8001ca0:	f7ff ff96 	bl	8001bd0 <__sfp_lock_release>
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001cac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001cb0:	6025      	str	r5, [r4, #0]
 8001cb2:	61a5      	str	r5, [r4, #24]
 8001cb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001cb8:	f7ff fd48 	bl	800174c <memset>
 8001cbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001cc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cc8:	3468      	adds	r4, #104	; 0x68
 8001cca:	e7d9      	b.n	8001c80 <__sfp+0x1c>
 8001ccc:	2104      	movs	r1, #4
 8001cce:	4638      	mov	r0, r7
 8001cd0:	f7ff ff62 	bl	8001b98 <__sfmoreglue>
 8001cd4:	4604      	mov	r4, r0
 8001cd6:	6030      	str	r0, [r6, #0]
 8001cd8:	2800      	cmp	r0, #0
 8001cda:	d1d5      	bne.n	8001c88 <__sfp+0x24>
 8001cdc:	f7ff ff78 	bl	8001bd0 <__sfp_lock_release>
 8001ce0:	230c      	movs	r3, #12
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	e7ee      	b.n	8001cc4 <__sfp+0x60>
 8001ce6:	bf00      	nop
 8001ce8:	080021a0 	.word	0x080021a0
 8001cec:	ffff0001 	.word	0xffff0001

08001cf0 <_fwalk_reent>:
 8001cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cf4:	4606      	mov	r6, r0
 8001cf6:	4688      	mov	r8, r1
 8001cf8:	2700      	movs	r7, #0
 8001cfa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001cfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001d02:	f1b9 0901 	subs.w	r9, r9, #1
 8001d06:	d505      	bpl.n	8001d14 <_fwalk_reent+0x24>
 8001d08:	6824      	ldr	r4, [r4, #0]
 8001d0a:	2c00      	cmp	r4, #0
 8001d0c:	d1f7      	bne.n	8001cfe <_fwalk_reent+0xe>
 8001d0e:	4638      	mov	r0, r7
 8001d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d14:	89ab      	ldrh	r3, [r5, #12]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d907      	bls.n	8001d2a <_fwalk_reent+0x3a>
 8001d1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	d003      	beq.n	8001d2a <_fwalk_reent+0x3a>
 8001d22:	4629      	mov	r1, r5
 8001d24:	4630      	mov	r0, r6
 8001d26:	47c0      	blx	r8
 8001d28:	4307      	orrs	r7, r0
 8001d2a:	3568      	adds	r5, #104	; 0x68
 8001d2c:	e7e9      	b.n	8001d02 <_fwalk_reent+0x12>

08001d2e <__retarget_lock_init_recursive>:
 8001d2e:	4770      	bx	lr

08001d30 <__retarget_lock_acquire_recursive>:
 8001d30:	4770      	bx	lr

08001d32 <__retarget_lock_release_recursive>:
 8001d32:	4770      	bx	lr

08001d34 <__swhatbuf_r>:
 8001d34:	b570      	push	{r4, r5, r6, lr}
 8001d36:	460e      	mov	r6, r1
 8001d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d3c:	4614      	mov	r4, r2
 8001d3e:	2900      	cmp	r1, #0
 8001d40:	461d      	mov	r5, r3
 8001d42:	b096      	sub	sp, #88	; 0x58
 8001d44:	da08      	bge.n	8001d58 <__swhatbuf_r+0x24>
 8001d46:	2200      	movs	r2, #0
 8001d48:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001d4c:	602a      	str	r2, [r5, #0]
 8001d4e:	061a      	lsls	r2, r3, #24
 8001d50:	d410      	bmi.n	8001d74 <__swhatbuf_r+0x40>
 8001d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d56:	e00e      	b.n	8001d76 <__swhatbuf_r+0x42>
 8001d58:	466a      	mov	r2, sp
 8001d5a:	f000 f9a3 	bl	80020a4 <_fstat_r>
 8001d5e:	2800      	cmp	r0, #0
 8001d60:	dbf1      	blt.n	8001d46 <__swhatbuf_r+0x12>
 8001d62:	9a01      	ldr	r2, [sp, #4]
 8001d64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001d68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001d6c:	425a      	negs	r2, r3
 8001d6e:	415a      	adcs	r2, r3
 8001d70:	602a      	str	r2, [r5, #0]
 8001d72:	e7ee      	b.n	8001d52 <__swhatbuf_r+0x1e>
 8001d74:	2340      	movs	r3, #64	; 0x40
 8001d76:	2000      	movs	r0, #0
 8001d78:	6023      	str	r3, [r4, #0]
 8001d7a:	b016      	add	sp, #88	; 0x58
 8001d7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001d80 <__smakebuf_r>:
 8001d80:	898b      	ldrh	r3, [r1, #12]
 8001d82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d84:	079d      	lsls	r5, r3, #30
 8001d86:	4606      	mov	r6, r0
 8001d88:	460c      	mov	r4, r1
 8001d8a:	d507      	bpl.n	8001d9c <__smakebuf_r+0x1c>
 8001d8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001d90:	6023      	str	r3, [r4, #0]
 8001d92:	6123      	str	r3, [r4, #16]
 8001d94:	2301      	movs	r3, #1
 8001d96:	6163      	str	r3, [r4, #20]
 8001d98:	b002      	add	sp, #8
 8001d9a:	bd70      	pop	{r4, r5, r6, pc}
 8001d9c:	466a      	mov	r2, sp
 8001d9e:	ab01      	add	r3, sp, #4
 8001da0:	f7ff ffc8 	bl	8001d34 <__swhatbuf_r>
 8001da4:	9900      	ldr	r1, [sp, #0]
 8001da6:	4605      	mov	r5, r0
 8001da8:	4630      	mov	r0, r6
 8001daa:	f000 f891 	bl	8001ed0 <_malloc_r>
 8001dae:	b948      	cbnz	r0, 8001dc4 <__smakebuf_r+0x44>
 8001db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001db4:	059a      	lsls	r2, r3, #22
 8001db6:	d4ef      	bmi.n	8001d98 <__smakebuf_r+0x18>
 8001db8:	f023 0303 	bic.w	r3, r3, #3
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	81a3      	strh	r3, [r4, #12]
 8001dc2:	e7e3      	b.n	8001d8c <__smakebuf_r+0xc>
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <__smakebuf_r+0x7c>)
 8001dc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8001dc8:	89a3      	ldrh	r3, [r4, #12]
 8001dca:	6020      	str	r0, [r4, #0]
 8001dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd0:	81a3      	strh	r3, [r4, #12]
 8001dd2:	9b00      	ldr	r3, [sp, #0]
 8001dd4:	6120      	str	r0, [r4, #16]
 8001dd6:	6163      	str	r3, [r4, #20]
 8001dd8:	9b01      	ldr	r3, [sp, #4]
 8001dda:	b15b      	cbz	r3, 8001df4 <__smakebuf_r+0x74>
 8001ddc:	4630      	mov	r0, r6
 8001dde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001de2:	f000 f971 	bl	80020c8 <_isatty_r>
 8001de6:	b128      	cbz	r0, 8001df4 <__smakebuf_r+0x74>
 8001de8:	89a3      	ldrh	r3, [r4, #12]
 8001dea:	f023 0303 	bic.w	r3, r3, #3
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	81a3      	strh	r3, [r4, #12]
 8001df4:	89a0      	ldrh	r0, [r4, #12]
 8001df6:	4305      	orrs	r5, r0
 8001df8:	81a5      	strh	r5, [r4, #12]
 8001dfa:	e7cd      	b.n	8001d98 <__smakebuf_r+0x18>
 8001dfc:	08001b8d 	.word	0x08001b8d

08001e00 <_free_r>:
 8001e00:	b538      	push	{r3, r4, r5, lr}
 8001e02:	4605      	mov	r5, r0
 8001e04:	2900      	cmp	r1, #0
 8001e06:	d040      	beq.n	8001e8a <_free_r+0x8a>
 8001e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e0c:	1f0c      	subs	r4, r1, #4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	bfb8      	it	lt
 8001e12:	18e4      	addlt	r4, r4, r3
 8001e14:	f000 f97a 	bl	800210c <__malloc_lock>
 8001e18:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <_free_r+0x8c>)
 8001e1a:	6813      	ldr	r3, [r2, #0]
 8001e1c:	b933      	cbnz	r3, 8001e2c <_free_r+0x2c>
 8001e1e:	6063      	str	r3, [r4, #4]
 8001e20:	6014      	str	r4, [r2, #0]
 8001e22:	4628      	mov	r0, r5
 8001e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e28:	f000 b976 	b.w	8002118 <__malloc_unlock>
 8001e2c:	42a3      	cmp	r3, r4
 8001e2e:	d908      	bls.n	8001e42 <_free_r+0x42>
 8001e30:	6820      	ldr	r0, [r4, #0]
 8001e32:	1821      	adds	r1, r4, r0
 8001e34:	428b      	cmp	r3, r1
 8001e36:	bf01      	itttt	eq
 8001e38:	6819      	ldreq	r1, [r3, #0]
 8001e3a:	685b      	ldreq	r3, [r3, #4]
 8001e3c:	1809      	addeq	r1, r1, r0
 8001e3e:	6021      	streq	r1, [r4, #0]
 8001e40:	e7ed      	b.n	8001e1e <_free_r+0x1e>
 8001e42:	461a      	mov	r2, r3
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	b10b      	cbz	r3, 8001e4c <_free_r+0x4c>
 8001e48:	42a3      	cmp	r3, r4
 8001e4a:	d9fa      	bls.n	8001e42 <_free_r+0x42>
 8001e4c:	6811      	ldr	r1, [r2, #0]
 8001e4e:	1850      	adds	r0, r2, r1
 8001e50:	42a0      	cmp	r0, r4
 8001e52:	d10b      	bne.n	8001e6c <_free_r+0x6c>
 8001e54:	6820      	ldr	r0, [r4, #0]
 8001e56:	4401      	add	r1, r0
 8001e58:	1850      	adds	r0, r2, r1
 8001e5a:	4283      	cmp	r3, r0
 8001e5c:	6011      	str	r1, [r2, #0]
 8001e5e:	d1e0      	bne.n	8001e22 <_free_r+0x22>
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4401      	add	r1, r0
 8001e66:	6011      	str	r1, [r2, #0]
 8001e68:	6053      	str	r3, [r2, #4]
 8001e6a:	e7da      	b.n	8001e22 <_free_r+0x22>
 8001e6c:	d902      	bls.n	8001e74 <_free_r+0x74>
 8001e6e:	230c      	movs	r3, #12
 8001e70:	602b      	str	r3, [r5, #0]
 8001e72:	e7d6      	b.n	8001e22 <_free_r+0x22>
 8001e74:	6820      	ldr	r0, [r4, #0]
 8001e76:	1821      	adds	r1, r4, r0
 8001e78:	428b      	cmp	r3, r1
 8001e7a:	bf01      	itttt	eq
 8001e7c:	6819      	ldreq	r1, [r3, #0]
 8001e7e:	685b      	ldreq	r3, [r3, #4]
 8001e80:	1809      	addeq	r1, r1, r0
 8001e82:	6021      	streq	r1, [r4, #0]
 8001e84:	6063      	str	r3, [r4, #4]
 8001e86:	6054      	str	r4, [r2, #4]
 8001e88:	e7cb      	b.n	8001e22 <_free_r+0x22>
 8001e8a:	bd38      	pop	{r3, r4, r5, pc}
 8001e8c:	200000dc 	.word	0x200000dc

08001e90 <sbrk_aligned>:
 8001e90:	b570      	push	{r4, r5, r6, lr}
 8001e92:	4e0e      	ldr	r6, [pc, #56]	; (8001ecc <sbrk_aligned+0x3c>)
 8001e94:	460c      	mov	r4, r1
 8001e96:	6831      	ldr	r1, [r6, #0]
 8001e98:	4605      	mov	r5, r0
 8001e9a:	b911      	cbnz	r1, 8001ea2 <sbrk_aligned+0x12>
 8001e9c:	f000 f88c 	bl	8001fb8 <_sbrk_r>
 8001ea0:	6030      	str	r0, [r6, #0]
 8001ea2:	4621      	mov	r1, r4
 8001ea4:	4628      	mov	r0, r5
 8001ea6:	f000 f887 	bl	8001fb8 <_sbrk_r>
 8001eaa:	1c43      	adds	r3, r0, #1
 8001eac:	d00a      	beq.n	8001ec4 <sbrk_aligned+0x34>
 8001eae:	1cc4      	adds	r4, r0, #3
 8001eb0:	f024 0403 	bic.w	r4, r4, #3
 8001eb4:	42a0      	cmp	r0, r4
 8001eb6:	d007      	beq.n	8001ec8 <sbrk_aligned+0x38>
 8001eb8:	1a21      	subs	r1, r4, r0
 8001eba:	4628      	mov	r0, r5
 8001ebc:	f000 f87c 	bl	8001fb8 <_sbrk_r>
 8001ec0:	3001      	adds	r0, #1
 8001ec2:	d101      	bne.n	8001ec8 <sbrk_aligned+0x38>
 8001ec4:	f04f 34ff 	mov.w	r4, #4294967295
 8001ec8:	4620      	mov	r0, r4
 8001eca:	bd70      	pop	{r4, r5, r6, pc}
 8001ecc:	200000e0 	.word	0x200000e0

08001ed0 <_malloc_r>:
 8001ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ed4:	1ccd      	adds	r5, r1, #3
 8001ed6:	f025 0503 	bic.w	r5, r5, #3
 8001eda:	3508      	adds	r5, #8
 8001edc:	2d0c      	cmp	r5, #12
 8001ede:	bf38      	it	cc
 8001ee0:	250c      	movcc	r5, #12
 8001ee2:	2d00      	cmp	r5, #0
 8001ee4:	4607      	mov	r7, r0
 8001ee6:	db01      	blt.n	8001eec <_malloc_r+0x1c>
 8001ee8:	42a9      	cmp	r1, r5
 8001eea:	d905      	bls.n	8001ef8 <_malloc_r+0x28>
 8001eec:	230c      	movs	r3, #12
 8001eee:	2600      	movs	r6, #0
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	4630      	mov	r0, r6
 8001ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ef8:	4e2e      	ldr	r6, [pc, #184]	; (8001fb4 <_malloc_r+0xe4>)
 8001efa:	f000 f907 	bl	800210c <__malloc_lock>
 8001efe:	6833      	ldr	r3, [r6, #0]
 8001f00:	461c      	mov	r4, r3
 8001f02:	bb34      	cbnz	r4, 8001f52 <_malloc_r+0x82>
 8001f04:	4629      	mov	r1, r5
 8001f06:	4638      	mov	r0, r7
 8001f08:	f7ff ffc2 	bl	8001e90 <sbrk_aligned>
 8001f0c:	1c43      	adds	r3, r0, #1
 8001f0e:	4604      	mov	r4, r0
 8001f10:	d14d      	bne.n	8001fae <_malloc_r+0xde>
 8001f12:	6834      	ldr	r4, [r6, #0]
 8001f14:	4626      	mov	r6, r4
 8001f16:	2e00      	cmp	r6, #0
 8001f18:	d140      	bne.n	8001f9c <_malloc_r+0xcc>
 8001f1a:	6823      	ldr	r3, [r4, #0]
 8001f1c:	4631      	mov	r1, r6
 8001f1e:	4638      	mov	r0, r7
 8001f20:	eb04 0803 	add.w	r8, r4, r3
 8001f24:	f000 f848 	bl	8001fb8 <_sbrk_r>
 8001f28:	4580      	cmp	r8, r0
 8001f2a:	d13a      	bne.n	8001fa2 <_malloc_r+0xd2>
 8001f2c:	6821      	ldr	r1, [r4, #0]
 8001f2e:	3503      	adds	r5, #3
 8001f30:	1a6d      	subs	r5, r5, r1
 8001f32:	f025 0503 	bic.w	r5, r5, #3
 8001f36:	3508      	adds	r5, #8
 8001f38:	2d0c      	cmp	r5, #12
 8001f3a:	bf38      	it	cc
 8001f3c:	250c      	movcc	r5, #12
 8001f3e:	4638      	mov	r0, r7
 8001f40:	4629      	mov	r1, r5
 8001f42:	f7ff ffa5 	bl	8001e90 <sbrk_aligned>
 8001f46:	3001      	adds	r0, #1
 8001f48:	d02b      	beq.n	8001fa2 <_malloc_r+0xd2>
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	442b      	add	r3, r5
 8001f4e:	6023      	str	r3, [r4, #0]
 8001f50:	e00e      	b.n	8001f70 <_malloc_r+0xa0>
 8001f52:	6822      	ldr	r2, [r4, #0]
 8001f54:	1b52      	subs	r2, r2, r5
 8001f56:	d41e      	bmi.n	8001f96 <_malloc_r+0xc6>
 8001f58:	2a0b      	cmp	r2, #11
 8001f5a:	d916      	bls.n	8001f8a <_malloc_r+0xba>
 8001f5c:	1961      	adds	r1, r4, r5
 8001f5e:	42a3      	cmp	r3, r4
 8001f60:	6025      	str	r5, [r4, #0]
 8001f62:	bf18      	it	ne
 8001f64:	6059      	strne	r1, [r3, #4]
 8001f66:	6863      	ldr	r3, [r4, #4]
 8001f68:	bf08      	it	eq
 8001f6a:	6031      	streq	r1, [r6, #0]
 8001f6c:	5162      	str	r2, [r4, r5]
 8001f6e:	604b      	str	r3, [r1, #4]
 8001f70:	4638      	mov	r0, r7
 8001f72:	f104 060b 	add.w	r6, r4, #11
 8001f76:	f000 f8cf 	bl	8002118 <__malloc_unlock>
 8001f7a:	f026 0607 	bic.w	r6, r6, #7
 8001f7e:	1d23      	adds	r3, r4, #4
 8001f80:	1af2      	subs	r2, r6, r3
 8001f82:	d0b6      	beq.n	8001ef2 <_malloc_r+0x22>
 8001f84:	1b9b      	subs	r3, r3, r6
 8001f86:	50a3      	str	r3, [r4, r2]
 8001f88:	e7b3      	b.n	8001ef2 <_malloc_r+0x22>
 8001f8a:	6862      	ldr	r2, [r4, #4]
 8001f8c:	42a3      	cmp	r3, r4
 8001f8e:	bf0c      	ite	eq
 8001f90:	6032      	streq	r2, [r6, #0]
 8001f92:	605a      	strne	r2, [r3, #4]
 8001f94:	e7ec      	b.n	8001f70 <_malloc_r+0xa0>
 8001f96:	4623      	mov	r3, r4
 8001f98:	6864      	ldr	r4, [r4, #4]
 8001f9a:	e7b2      	b.n	8001f02 <_malloc_r+0x32>
 8001f9c:	4634      	mov	r4, r6
 8001f9e:	6876      	ldr	r6, [r6, #4]
 8001fa0:	e7b9      	b.n	8001f16 <_malloc_r+0x46>
 8001fa2:	230c      	movs	r3, #12
 8001fa4:	4638      	mov	r0, r7
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	f000 f8b6 	bl	8002118 <__malloc_unlock>
 8001fac:	e7a1      	b.n	8001ef2 <_malloc_r+0x22>
 8001fae:	6025      	str	r5, [r4, #0]
 8001fb0:	e7de      	b.n	8001f70 <_malloc_r+0xa0>
 8001fb2:	bf00      	nop
 8001fb4:	200000dc 	.word	0x200000dc

08001fb8 <_sbrk_r>:
 8001fb8:	b538      	push	{r3, r4, r5, lr}
 8001fba:	2300      	movs	r3, #0
 8001fbc:	4d05      	ldr	r5, [pc, #20]	; (8001fd4 <_sbrk_r+0x1c>)
 8001fbe:	4604      	mov	r4, r0
 8001fc0:	4608      	mov	r0, r1
 8001fc2:	602b      	str	r3, [r5, #0]
 8001fc4:	f7fe fa76 	bl	80004b4 <_sbrk>
 8001fc8:	1c43      	adds	r3, r0, #1
 8001fca:	d102      	bne.n	8001fd2 <_sbrk_r+0x1a>
 8001fcc:	682b      	ldr	r3, [r5, #0]
 8001fce:	b103      	cbz	r3, 8001fd2 <_sbrk_r+0x1a>
 8001fd0:	6023      	str	r3, [r4, #0]
 8001fd2:	bd38      	pop	{r3, r4, r5, pc}
 8001fd4:	200000e4 	.word	0x200000e4

08001fd8 <__sread>:
 8001fd8:	b510      	push	{r4, lr}
 8001fda:	460c      	mov	r4, r1
 8001fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fe0:	f000 f8a0 	bl	8002124 <_read_r>
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	bfab      	itete	ge
 8001fe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001fea:	89a3      	ldrhlt	r3, [r4, #12]
 8001fec:	181b      	addge	r3, r3, r0
 8001fee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001ff2:	bfac      	ite	ge
 8001ff4:	6563      	strge	r3, [r4, #84]	; 0x54
 8001ff6:	81a3      	strhlt	r3, [r4, #12]
 8001ff8:	bd10      	pop	{r4, pc}

08001ffa <__swrite>:
 8001ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ffe:	461f      	mov	r7, r3
 8002000:	898b      	ldrh	r3, [r1, #12]
 8002002:	4605      	mov	r5, r0
 8002004:	05db      	lsls	r3, r3, #23
 8002006:	460c      	mov	r4, r1
 8002008:	4616      	mov	r6, r2
 800200a:	d505      	bpl.n	8002018 <__swrite+0x1e>
 800200c:	2302      	movs	r3, #2
 800200e:	2200      	movs	r2, #0
 8002010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002014:	f000 f868 	bl	80020e8 <_lseek_r>
 8002018:	89a3      	ldrh	r3, [r4, #12]
 800201a:	4632      	mov	r2, r6
 800201c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002020:	81a3      	strh	r3, [r4, #12]
 8002022:	4628      	mov	r0, r5
 8002024:	463b      	mov	r3, r7
 8002026:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800202a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800202e:	f000 b817 	b.w	8002060 <_write_r>

08002032 <__sseek>:
 8002032:	b510      	push	{r4, lr}
 8002034:	460c      	mov	r4, r1
 8002036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800203a:	f000 f855 	bl	80020e8 <_lseek_r>
 800203e:	1c43      	adds	r3, r0, #1
 8002040:	89a3      	ldrh	r3, [r4, #12]
 8002042:	bf15      	itete	ne
 8002044:	6560      	strne	r0, [r4, #84]	; 0x54
 8002046:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800204a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800204e:	81a3      	strheq	r3, [r4, #12]
 8002050:	bf18      	it	ne
 8002052:	81a3      	strhne	r3, [r4, #12]
 8002054:	bd10      	pop	{r4, pc}

08002056 <__sclose>:
 8002056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800205a:	f000 b813 	b.w	8002084 <_close_r>
	...

08002060 <_write_r>:
 8002060:	b538      	push	{r3, r4, r5, lr}
 8002062:	4604      	mov	r4, r0
 8002064:	4608      	mov	r0, r1
 8002066:	4611      	mov	r1, r2
 8002068:	2200      	movs	r2, #0
 800206a:	4d05      	ldr	r5, [pc, #20]	; (8002080 <_write_r+0x20>)
 800206c:	602a      	str	r2, [r5, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	f7fe f912 	bl	8000298 <_write>
 8002074:	1c43      	adds	r3, r0, #1
 8002076:	d102      	bne.n	800207e <_write_r+0x1e>
 8002078:	682b      	ldr	r3, [r5, #0]
 800207a:	b103      	cbz	r3, 800207e <_write_r+0x1e>
 800207c:	6023      	str	r3, [r4, #0]
 800207e:	bd38      	pop	{r3, r4, r5, pc}
 8002080:	200000e4 	.word	0x200000e4

08002084 <_close_r>:
 8002084:	b538      	push	{r3, r4, r5, lr}
 8002086:	2300      	movs	r3, #0
 8002088:	4d05      	ldr	r5, [pc, #20]	; (80020a0 <_close_r+0x1c>)
 800208a:	4604      	mov	r4, r0
 800208c:	4608      	mov	r0, r1
 800208e:	602b      	str	r3, [r5, #0]
 8002090:	f7fe f9e0 	bl	8000454 <_close>
 8002094:	1c43      	adds	r3, r0, #1
 8002096:	d102      	bne.n	800209e <_close_r+0x1a>
 8002098:	682b      	ldr	r3, [r5, #0]
 800209a:	b103      	cbz	r3, 800209e <_close_r+0x1a>
 800209c:	6023      	str	r3, [r4, #0]
 800209e:	bd38      	pop	{r3, r4, r5, pc}
 80020a0:	200000e4 	.word	0x200000e4

080020a4 <_fstat_r>:
 80020a4:	b538      	push	{r3, r4, r5, lr}
 80020a6:	2300      	movs	r3, #0
 80020a8:	4d06      	ldr	r5, [pc, #24]	; (80020c4 <_fstat_r+0x20>)
 80020aa:	4604      	mov	r4, r0
 80020ac:	4608      	mov	r0, r1
 80020ae:	4611      	mov	r1, r2
 80020b0:	602b      	str	r3, [r5, #0]
 80020b2:	f7fe f9da 	bl	800046a <_fstat>
 80020b6:	1c43      	adds	r3, r0, #1
 80020b8:	d102      	bne.n	80020c0 <_fstat_r+0x1c>
 80020ba:	682b      	ldr	r3, [r5, #0]
 80020bc:	b103      	cbz	r3, 80020c0 <_fstat_r+0x1c>
 80020be:	6023      	str	r3, [r4, #0]
 80020c0:	bd38      	pop	{r3, r4, r5, pc}
 80020c2:	bf00      	nop
 80020c4:	200000e4 	.word	0x200000e4

080020c8 <_isatty_r>:
 80020c8:	b538      	push	{r3, r4, r5, lr}
 80020ca:	2300      	movs	r3, #0
 80020cc:	4d05      	ldr	r5, [pc, #20]	; (80020e4 <_isatty_r+0x1c>)
 80020ce:	4604      	mov	r4, r0
 80020d0:	4608      	mov	r0, r1
 80020d2:	602b      	str	r3, [r5, #0]
 80020d4:	f7fe f9d8 	bl	8000488 <_isatty>
 80020d8:	1c43      	adds	r3, r0, #1
 80020da:	d102      	bne.n	80020e2 <_isatty_r+0x1a>
 80020dc:	682b      	ldr	r3, [r5, #0]
 80020de:	b103      	cbz	r3, 80020e2 <_isatty_r+0x1a>
 80020e0:	6023      	str	r3, [r4, #0]
 80020e2:	bd38      	pop	{r3, r4, r5, pc}
 80020e4:	200000e4 	.word	0x200000e4

080020e8 <_lseek_r>:
 80020e8:	b538      	push	{r3, r4, r5, lr}
 80020ea:	4604      	mov	r4, r0
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	2200      	movs	r2, #0
 80020f2:	4d05      	ldr	r5, [pc, #20]	; (8002108 <_lseek_r+0x20>)
 80020f4:	602a      	str	r2, [r5, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	f7fe f9d0 	bl	800049c <_lseek>
 80020fc:	1c43      	adds	r3, r0, #1
 80020fe:	d102      	bne.n	8002106 <_lseek_r+0x1e>
 8002100:	682b      	ldr	r3, [r5, #0]
 8002102:	b103      	cbz	r3, 8002106 <_lseek_r+0x1e>
 8002104:	6023      	str	r3, [r4, #0]
 8002106:	bd38      	pop	{r3, r4, r5, pc}
 8002108:	200000e4 	.word	0x200000e4

0800210c <__malloc_lock>:
 800210c:	4801      	ldr	r0, [pc, #4]	; (8002114 <__malloc_lock+0x8>)
 800210e:	f7ff be0f 	b.w	8001d30 <__retarget_lock_acquire_recursive>
 8002112:	bf00      	nop
 8002114:	200000d8 	.word	0x200000d8

08002118 <__malloc_unlock>:
 8002118:	4801      	ldr	r0, [pc, #4]	; (8002120 <__malloc_unlock+0x8>)
 800211a:	f7ff be0a 	b.w	8001d32 <__retarget_lock_release_recursive>
 800211e:	bf00      	nop
 8002120:	200000d8 	.word	0x200000d8

08002124 <_read_r>:
 8002124:	b538      	push	{r3, r4, r5, lr}
 8002126:	4604      	mov	r4, r0
 8002128:	4608      	mov	r0, r1
 800212a:	4611      	mov	r1, r2
 800212c:	2200      	movs	r2, #0
 800212e:	4d05      	ldr	r5, [pc, #20]	; (8002144 <_read_r+0x20>)
 8002130:	602a      	str	r2, [r5, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	f7fe f971 	bl	800041a <_read>
 8002138:	1c43      	adds	r3, r0, #1
 800213a:	d102      	bne.n	8002142 <_read_r+0x1e>
 800213c:	682b      	ldr	r3, [r5, #0]
 800213e:	b103      	cbz	r3, 8002142 <_read_r+0x1e>
 8002140:	6023      	str	r3, [r4, #0]
 8002142:	bd38      	pop	{r3, r4, r5, pc}
 8002144:	200000e4 	.word	0x200000e4

08002148 <_init>:
 8002148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214a:	bf00      	nop
 800214c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800214e:	bc08      	pop	{r3}
 8002150:	469e      	mov	lr, r3
 8002152:	4770      	bx	lr

08002154 <_fini>:
 8002154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002156:	bf00      	nop
 8002158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800215a:	bc08      	pop	{r3}
 800215c:	469e      	mov	lr, r3
 800215e:	4770      	bx	lr
